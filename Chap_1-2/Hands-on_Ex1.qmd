---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

Firstly, we need to install the required R packages.

-   **sf**: importing, managing and processing geospatial data

-   **tidyverse**: importing, wrangling and visualizing data. It consists of a family of R packages, including **readr**, **readxl**, **tidyr**, **dplyr** and **ggplot2**.

```{r}
pacman::p_load(sf, tidyverse)

```

## Importing Geospatial Data

### Importing polygon feature data

The following codes import *MP14_SUBZONE_WEB_PL* shapfile into R as a polygon feature data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")

```

*mpsz* is in **svy21** projected coordinates system.

### Importing polyline feature data

The following codes import *CyclingPath* shapfile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPath")

```

*cyclingpath* is in **svy21** projected coordinates systems.

### Importing GIS data in kml format

The following code chunk imports *pre-schools-location-kml* kml file into R as a point feature data frame.

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")

```

*preschool* is in **wgs84** coordinates systems.

## Checking The Content of A Simple Feature Data Frame

### Getting geometry from a sf dataframe

The following code chunk gets the geometries from *mpsz* polygon feature dataframe.

```{r}
st_geometry(mpsz)

```

### Getting attribute information in a sf dataframe

The following code chunk gets the attribute information from *mpsz* dataframe.

```{r}
glimpse(mpsz)

```

### Revealing complete information of a feature object

The following code chunk displays the top 5 objects from *mpsz* dataframe.

```{r}
head(mpsz, n=5)

```

## Plotting the geospatial data

The following code chunk plots the geospatial features. The default plot is a multi-plot of all attributes.

```{r}
plot(mpsz)

```

The following code chunk only plots the geometry.

```{r}
plot(st_geometry(mpsz))
```

The following code chunk only plots the specified attribute.

```{r}
plot(mpsz["PLN_AREA_N"])

```

## Working with Projection

Projection transformation refers to the projection of a simple feature dataframe from one coordinate system to another coordinate system.

### Assigning EPSG code to a simple feature dataframe

When the coordinate system of the dataframe is either missing (e,g,. missing .proj for ESRI shapefile) or wrongly assigned, we need to either provide the EPSG code or correct it.

The following code chunks corrects the wrong EPSG code in *mpsz* simple feature dataframe.

We first review the coordinate system, and noticed that the original EPSG code is wrongly assigned as 9001.

```{r}
st_crs(mpsz)

```

We set the EPSG code to 3414.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)

```

Check CSR again and it's shown as 3414 now.

```{r}
st_crs(mpsz3414)

```

### Transforming the projection from wgs84 to svy21

The following code chunks transforms the *preschool* simple feature dataframe from wgs84 coordinate system to svy21 coordinate system.

We first review the coordinate system.

```{r}
st_crs(preschool)

```

Perform the projection transformation.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)

```

Review the new coordinate system.

```{r}
st_crs(preschool3414)

```

## Importing and Converting An Aspatial Data

### Importing the aspatial data

The following code chunk imports *listings* data set into R as a dataframe.

```{r}
listings <- read_csv("data/aspatial/listings.csv")

```

Take a look at the dataframe.

```{r}
list(listings)

```

### Creating a simple feature dataframe from an aspatial dataframe

As the latitude and longitude in the dataframe are in decimal format, the coordinate system might be wgs84.

The following code chunk converts listings dataframe into a simple feature data with coordiate system being wgs84, and then transform the coordinate system to svy21.

```{r}
listings_sf <- st_as_sf(listings, 
                        coords = c("longitude", "latitude"),
                        crs = 4326) %>% 
  st_transform(crs = 3414)

```

Check the new simple feature dataframe

```{r}
glimpse(listings_sf)
```

## Geoprocessing

### Buffering

**Scenario:** The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The following code chunk computes 5-meter buffer around the cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)

```

Calculate the area of the buffers.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

```

Calculate the total land involved.

```{r}
sum(buffer_cycling$AREA)

```

### Point-in-polygon count

**Scenario:** A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The following code chunk identifys the pre-schools located inside each planning subzone

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414,preschool3414))

```

Check summary statistics.

```{r}
summary(mpsz3414$`PreSch Count`)

```

List the planning subzone with the most number of pre-schools.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)

```

Calculate the density of pre-schools by planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>% st_area()

```

```{r}
mpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

```

```{r}
head(mpsz3414)

```

## Exploratory Data Analysis (EDA)

The following code chunk plots a histogram to reveal the distribution of *PreSch Density*.

```{r}
hist(mpsz3414$`PreSch Density`)

```

A better visualization with ggplot2.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

```

Scatter plot to show the relationship between Pre-School Density and Pre-School Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")

```
