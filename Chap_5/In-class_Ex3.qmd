---
title: "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method"
editor: visual
---

## Overview

In this in-class exercise, I learned how to perform spatially constrained clustering using ClustGeo method.

## Getting Started

Firstly, we need to install the required R packages.

-   **sf**: importing, managing and processing geospatial data.

-   **spdep**: computing spatial weights and spatially lagged variables.

-   **tmap**: plotting Thematic Maps.

-   **tidyverse**: importing, wrangling and visualizing data. It consists of a family of R packages, including **readr**, **readxl**, **tidyr**, **dplyr** and **ggplot2**.

-   **rgdal**: handling geospatial data

-   **ggpubr:** facilitating **ggplot2** to make more visually appealing charts

-   **cluster:** performing cluster analysis

-   **factoextra:** extracting and visualizing the output of multivariate data analyses

-   **NbClust:** determining the best number of clusters in a data set

-   **heatmaply:** creating interactive cluster heatmaps

-   **corrplot:** plotting correlation matrix

-   **psych:** handling multivariate analysis

-   **ClustGeo:**

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, rgdal, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, ClustGeo)

```

## Importing Required Data

We first import the required data frames into R.

```{r}
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf <- read_rds("data/rds/shan_sf.rds")

```

## Computing proximity matrix

Since the penetration rates are already in the same range which is from 0 to 1000, we would use the non-normalized penetration rates for cluster analysis in this exercise.

Now, let's compute the proximity matrix using euclidean distance.

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat

```

## Wald-like Hierarchical Clustering: ClustGeo

To perform the non-spatially constrained hierarchical clustering, we need to provide the function a dissimilarity matrix.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)

```

### Mapping the clusters formed

Now, let's plot the clusters on top of the township boundaries.

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))

shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

qtm(shan_sf_ngeo_cluster, "CLUSTER")

```

Again, the townships within the clusters are sparsely located. Let's now perform the spatially constrained hierarchical clustering to obtain better clustering results.

## Spatially Constrained Hierarchical Clustering

We need to derive a spatial distance matrix before performing spatially constrained hierarchical clustering.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)

```

Next, we need to determine a suitable value for the mixing parameter alpha.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K = 6, graph = TRUE)

```

We could use an alpha of 0.3.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)

```

Now, let's derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k = 6))

```

Then we join the clustering groups with shan_sf polygon feature data frame.

```{r}
shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)

```

We can now plot the newly derived spatially contrained clusters on the township boundaries.

```{r}
qtm(shan_sf_Gcluster, "CLUSTER")

```
