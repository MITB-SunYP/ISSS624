[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html",
    "href": "Chap_1-2/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#getting-started",
    "href": "Chap_1-2/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nsf: importing, managing and processing geospatial data\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\n\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Chap_1-2/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data\nThe following codes import MP14_SUBZONE_WEB_PL shapfile into R as a polygon feature data frame.\n\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_1-2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nmpsz is in svy21 projected coordinates systems.\n\n\nImporting polyline feature data\nThe following codes import CyclingPath shapfile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_1-2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\ncyclingpath is in svy21 projected coordinates systems.\n\n\nImporting GIS data in kml format\nThe following code chunk imports pre-schools-location-kml kml file into R as a point feature data frame.\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_1-2\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\npreschool is in wgs84 coordinates systems."
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Chap_1-2/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Checking The Content of A Simple Feature Data Frame",
    "text": "Checking The Content of A Simple Feature Data Frame\n\nGetting geometry from a sf dataframe\nThe following code chunk gets the geometries from mpsz polygon feature dataframe.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\nGetting attribute information in a sf dataframe\nThe following code chunk gets the attribute information from mpsz dataframe.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\nRevealing complete information of a feature object\nThe following code chunk displays the top 5 objects from mpsz dataframe.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Chap_1-2/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the geospatial data",
    "text": "Plotting the geospatial data\nThe following code chunk plots the geospatial features. The default plot is a multi-plot of all attributes.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe following code chunk only plots the geometry.\n\nplot(st_geometry(mpsz))\n\n\n\n\nThe following code chunk only plots the specified attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#working-with-projection",
    "href": "Chap_1-2/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\nProjection transformation refers to the projection of a simple feature dataframe from one coordinate system to another coordinate system.\n\nAssigning EPSG code to a simple feature dataframe\nWhen the coordinate system of the dataframe is either missing (e,g,. missing .proj for ESRI shapefile) or wrongly assigned, we need to either provide the EPSG code or correct it.\nThe following code chunks corrects the wrong EPSG code in mpsz simple feature dataframe.\nWe first review the coordinate system, and noticed that the original EPSG code is wrongly assigned as 9001.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWe set the EPSG code to 3414.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nCheck CSR again and it’s shown as 3414 now.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection from wgs84 to svy21\nThe following code chunks transforms the preschool simple feature dataframe from wgs84 coordinate system to svy21 coordinate system.\nWe first review the coordinate system.\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nPerform the projection transformation.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nReview the new coordinate system.\n\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "href": "Chap_1-2/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting An Aspatial Data",
    "text": "Importing and Converting An Aspatial Data\n\nImporting the aspatial data\nThe following code chunk imports listings data set into R as a dataframe.\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTake a look at the dataframe.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\nCreating a simple feature dataframe from an aspatial dataframe\nAs the latitude and longitude in the dataframe are in decimal format, the coordinate system might be wgs84.\nThe following code chunk converts listings dataframe into a simple feature data with coordiate system being wgs84, and then transform the coordinate system to svy21.\n\nlistings_sf <- st_as_sf(listings, \n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>% \n  st_transform(crs = 3414)\n\nCheck the new simple feature dataframe\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#geoprocessing",
    "href": "Chap_1-2/Hands-on_Ex1.html#geoprocessing",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing",
    "text": "Geoprocessing\n\nBuffering\nScenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe following code chunk computes 5-meter buffer around the cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)\n\nCalculate the area of the buffers.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nCalculate the total land involved.\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\nScenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe following code chunk identifys the pre-schools located inside each planning subzone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414,preschool3414))\n\nCheck summary statistics.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nList the planning subzone with the most number of pre-schools.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nCalculate the density of pre-schools by planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>% st_area()\n\n\nmpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhead(mpsz3414)\n\nSimple feature collection with 6 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            5\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            2\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            1\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           10\n             Area   PreSch Density\n1 1630379.3 [m^2] 0.000000 [1/m^2]\n2  559816.2 [m^2] 8.931502 [1/m^2]\n3  160807.5 [m^2] 0.000000 [1/m^2]\n4  595428.9 [m^2] 3.358923 [1/m^2]\n5  387429.4 [m^2] 2.581115 [1/m^2]\n6 1030378.8 [m^2] 9.705169 [1/m^2]"
  },
  {
    "objectID": "Chap_1-2/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Chap_1-2/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nThe following code chunk plots a histogram to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nA better visualization with ggplot2.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nScatter plot to show the relationship between Pre-School Density and Pre-School Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Chap_3-4/Hands-on_Ex2.html",
    "href": "Chap_3-4/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, I learned how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) using R."
  },
  {
    "objectID": "Chap_3-4/Hands-on_Ex2.html#getting-started",
    "href": "Chap_3-4/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nsf: importing, managing and processing geospatial data.\nspdep: computing spatial weights and spatially lagged variables.\ntmap: plotting Thematic Maps\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Chap_3-4/Hands-on_Ex2.html#importing-required-data",
    "href": "Chap_3-4/Hands-on_Ex2.html#importing-required-data",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Importing Required Data",
    "text": "Importing Required Data\n\nImporting polygon feature data\nThe following codes import Hunan shapfile into R as a polygon feature data frame.\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_3-4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting the aspatial data\nThe following code chunk imports Hunan_2012 data set into R as a dataframe.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below joins the two dataframes, adding the attributes in hunan2012 dataframes to hunan dataframe.\n\nhunan <- left_join(hunan, hunan2012) %>%\n  select(1:4, 7, 15)\n\nJoining, by = \"County\"\n\n\n\n\nVisualizing regional development indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp = 1, \n             ncol = 2)"
  },
  {
    "objectID": "Chap_3-4/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Chap_3-4/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\n\nComputing contiguity spatial weights\nCalculate spatial weights of the study area. Compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, \n                queen = T)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nStandardizing weight matrix by row\nThe code chunk below assigns equal weight to each neighboring polygon.\n\nrswm_q <- nb2listw(wm_q, \n                   style = \"W\", \n                   zero.policy = T)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\nGlobal spatial autocorrelation: Moran’s I\nThe code chunk below performs Moran’s I statistical testing.\n\nmoran.test(hunan$GDPPC, \n           listw = rswm_q, \n           zero.policy = T, \n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nQuestion: What statistical conclusion can you draw from the output above? Ans: Since p value is less than 0.05, we have enough evidence to conclude that the GDPPC distribution among different counties are significantly different at 5% significance level.\nPermutation test for Moran’s I statistic using 1000 simulations.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw = rswm_q, \n                nsim = 999, \n                zero.policy = T, \n                na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nQuestion: What statistical conclusion can you draw from the output above? Ans: Since p value is less than 0.05, we have enough evidence to conclude that xxx at 5% significance level."
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html",
    "href": "Chap_3-4/In-class_Ex1.html",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "",
    "text": "In this in-class exercise, I learned how to compute spatial weights using R."
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#getting-started",
    "href": "Chap_3-4/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nsf: importing, managing and processing geospatial data.\nspdep: computing spatial weights and spatially lagged variables.\ntmap: plotting Thematic Maps\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#importing-required-data",
    "href": "Chap_3-4/In-class_Ex1.html#importing-required-data",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Importing Required Data",
    "text": "Importing Required Data\n\nImporting polygon feature data\nThe following codes import Hunan shapfile into R as a polygon feature data frame.\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_3-4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting the aspatial data\nThe following code chunk imports Hunan_2012 data set into R as a dataframe.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below joins the two dataframes, adding the attributes in hunan2012 dataframes to hunan dataframe.\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#visualizing-weights-and-applications",
    "href": "Chap_3-4/In-class_Ex1.html#visualizing-weights-and-applications",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Visualizing Weights and Applications",
    "text": "Visualizing Weights and Applications\n\nVisualizing regional development indicator\nThe code chunk below plots two maps, one base map showing the county boundaries within Hunan province, and the other one is a choropleth map showing the distribution of GDPPC 2012 of the counties.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "Chap_3-4/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\n\nComputing (Queen) contiguity based neighbors\nThe code chunk below computes Queen contiguity weight matrix on hunan dataframe.\n\nwm_q <- poly2nb(hunan, queen = T)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nCheck the neighbors for the 1st polygon in the object.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nGet the county name of polygon ID = 1.\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nGet the county names of the 5 neighbors of the 1st polygon in the object.\n\nhunan$NAME_3[wm_q[[1]]]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGet the GDPPC of these 5 neighbors.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay the complete weight matrix.\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = T)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (Rook) contiguity based neighbors\nThe code chunk below computes Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen = F)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nVisualizing contiguity weights\nGet the longitude of the counties from hunan dataframe.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nGet the latitude of the counties from hunan dataframe.\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nCombine longitude and latitude into one object.\n\ncoords <- cbind(longitude, latitude)\n\nCheck a few rows to make sure the data is combined correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbors map\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = T, col = \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbors map\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = T, col = \"red\")\n\n\n\n\n\n\nPlotting Both Queen and Rook contiguity based neighbors maps\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = T, col = \"red\")\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = T, col = \"red\")"
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#computing-distanced-based-neighbors",
    "href": "Chap_3-4/In-class_Ex1.html#computing-distanced-based-neighbors",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Computing Distanced Based Neighbors",
    "text": "Computing Distanced Based Neighbors\n\nDetermining the cut-off distance\nThe code chunk below calculates and displays the distribution of distance among all neighbors.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = T))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe maximum distance could be used as the upper threshold to every county has at least one neighbor.\n\n\nComputing fixed distance weight matrix\nThe code chunk below calculates the distance weight matrix.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = T)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nAns: Average number of links above shows that each county has 3.68 neighbors within the threshold on average.\nDisplay the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = T)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the weight matrix.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nCompute the number of disjoint connected counties.\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\nGet the id of the disjoint connected counties.\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting dixed distance weight matrix\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_d62, coords, add = T)\nplot(k1, coords, add = T, col = \"red\", length = 0.08)\n\n\n\n\nPlot the two graphs separately.\n\npar(mfrow = c(1,2))\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(k1, coords, add = T, col = \"red\", length = 0.08, main = \"1st nearest neighbours\")\n\nplot(hunan$geometry, border = \"lightgray\")\nplot(wm_d62, coords, add = T, pch = 19, cex = 0.6, main = \"Distance link\")\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nThe code chunk below controls the number of neighbors directly using k-nearest neighbors, either accepting asymmetric neighbors or imposing symmetry.\n\nknn6 <- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nDisplay the content of the matrix.\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting distance based neighbors\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = T, col = \"red\")"
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#weights-based-on-idw",
    "href": "Chap_3-4/In-class_Ex1.html#weights-based-on-idw",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Weights Based on IDW",
    "text": "Weights Based on IDW\nThe code chunk below derives a spatial weight matrix based on Inversed Distance method.\n\ndist <- nbdists(wm_q, coords, longlat = T)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardized weights matrix\nThe code chunk below standardized the weights matrix by row. Style = “W” assigns equal weight to each neighboring polygon.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = T)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCheck the weight of the 1st polygon’s neighbors.\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive a row standardized distance weight matrix\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=T)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nDisplay the weights of the neighbors of 1st polygon.\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\nCheck the distribution of the weights.\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Chap_3-4/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "Chap_3-4/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1: Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\n\nSpatial lag with row-standardized weights\nThe code chunk below computes the average neighbor GDPPC value for each polygon, which is also known as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nAppend the spatially lag GDPPC values to hunan dataframe.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nDisplay the the average neighboring income values for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both the GDPPC and spatial lag GDPPC for comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nThe code chunk below calculates the spatial lag as a sum of neighboring values by assigning binary weights.\n\nb_weights <- lapply(wm_q, function(x) 0 * x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute a lag variable from the weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nTake a look at the results.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend the lag_sum attribute into hunan dataframe.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlot both the GDPPC and Spatial Lag Sum GDPPC for comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nwm_q1 <- wm_q\n\nAdd the diagonal element to the neighbour list.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCreate the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nConvert the lag variable listw object into a dataframe.\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend lag_window_avg GDPPC values onto hunan dataframe.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nwm_q1 <- wm_q\n\nAdd the diagonal element to the neighbor list.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nAssign binary weights to the neighbor structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0 * x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nAssign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute the lag variable.\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConvert the lag variable listw object into a dataframe.\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC values to hunan dataframe.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html",
    "href": "Chap_5/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, I learned how to delineate homogeneous region by using geographically referenced multivariate data. The two main types of analysis I learned are:\n\nhierarchical cluster analysis\nspatially constrained cluster analysis"
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#getting-started",
    "href": "Chap_5/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nsf: importing, managing and processing geospatial data.\nspdep: computing spatial weights and spatially lagged variables.\ntmap: plotting Thematic Maps.\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\nrgdal: handling geospatial data\nggpubr: facilitating ggplot2 to make more visually appealing charts\ncluster: performing cluster analysis\nfactoextra: extracting and visualizing the output of multivariate data analyses\nNbClust: determining the best number of clusters in a data set\nheatmaply: creating interactive cluster heatmaps\ncorrplot: plotting correlation matrix\npsych: handling multivariate analysis\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, rgdal, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych)"
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#importing-required-data",
    "href": "Chap_5/Hands-on_Ex3.html#importing-required-data",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing Required Data",
    "text": "Importing Required Data\n\nImporting geospatial data\nThe following codes import Myanmar Township Boundary GIS shapefile into R as a polygon feature data frame.\n\nshan_sf <- st_read(dsn = \"data/geospatial\",\n                 layer = \"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_5\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported simple feature data frame is a multipolygon object. It contains 330 features and 14 fields. In addition, it’s in WGS84 Coordinate System.\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nThe data frame is imported correctly after a brief visual check on the first 10 rows.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\nThe field types are correct as well.\n\n\nImporting the aspatial data\nThe following code chunk imports InfoComm data set into R as a tibble data frame. The data is extracted from The 2014 Myanmar Population and Housing Census Myanmar.\n\nict <- read_csv(\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe ict tibble data frame has 55 rows and 11 columns.\nLet’s take a look at the summary statistics of the columns.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are 4 string columns and 7 numerical columns. No missing data exists in the numerical columns.\n\n\nCreating New Variables to Facilitate Our Analysis\nOur analysis would be biased if we use the counts in the ict data frame to find the similar regions, because bigger regions would have more households and thus more sets of radio, tv etc. Penetration rate would be a better attribute to use in this analysis.\nTherefore, let’s calculate the penetration rate of the ict components base to the household numbers in the region. We also renamed the column names.\n\nict_derived <- ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`)\n\nLet’s take a look at the summary statistics of the derived data frame.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nWe could see that six new columns for the penetration rate are created."
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "href": "Chap_5/Hands-on_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nLet’s start the data exploration from Histograms and Boxplots as the interested variables are numerical variables.\n\nHistogram: to check the data distribution\n\nradio_hist <- ggplot(data = ict_derived,\n                     aes(x = `RADIO_PR`)) +\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"light blue\")\n\ntv_hist <- ggplot(data = ict_derived, \n                  aes(x = `TV_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\nllphone_hist <- ggplot(data = ict_derived, \n                       aes(x = `LLPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\nmphone_hist <- ggplot(data = ict_derived, \n                      aes(x = `MPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\ncomputer_hist <- ggplot(data = ict_derived, \n                        aes(x = `COMPUTER_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\ninternet_hist <- ggplot(data = ict_derived, \n                        aes(x = `INTERNET_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\")\n\nggarrange(radio_hist, tv_hist, llphone_hist, mphone_hist, computer_hist, internet_hist, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\nThe histograms above show that the penetration rate for TV, radio and mobile phone are somewhat close to a bell shape, although the penetration rate for radio has a strike at around 80 making it possible for a bi-model distribution. On the other hand, the penetration rate for land line phone, computer and internet display a right skewed pattern.\nBoxplots: to check for any outliers\n\nradio_box <- ggplot(data = ict_derived,\n                    aes(x = `RADIO_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\ntv_box <- ggplot(data = ict_derived,\n                 aes(x = `TV_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\nllphone_box <- ggplot(data = ict_derived,\n                      aes(x = `LLPHONE_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\nmphone_box <- ggplot(data = ict_derived,\n                     aes(x = `MPHONE_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\ncomputer_box <- ggplot(data = ict_derived,\n                       aes(x = `COMPUTER_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\ninternet_box <- ggplot(data = ict_derived,\n                       aes(x = `INTERNET_PR`)) +\n  geom_boxplot(color = \"black\",\n               fill = \"light blue\")\n\nggarrange(radio_box, tv_box, llphone_box, mphone_box, computer_box, internet_box, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\nThe box plots above show that there are a few outliers in all the penetration rates except that for mobile phone.\n\n\nEDA using choropleth map\nJoining geospatial data with aspatial data\nLet’s now join the simple feature data frame, shan_sf, with the tibble data frame with the derived variables, ict_derived.\n\nshan_sf <- left_join(shan_sf,\n                     ict_derived,\n                     by = c(\"TS_PCODE\" = \"TS_PCODE\"))\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nPreparing the choropleth map\nLet’s first compare two pairs of choropleth maps\n\nTotal household number v.s. radio count\nTotal household number v.s. radio penetration rate\n\n\nTT_HOUSEHOLDS.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map <- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nWe could see that the number of radios owned at township level is highly correlated with the number of households in the area. The towns with a larger number of households also own more radios.\nHowever…\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins = 0, asp = 0)\n\n\n\n\nRadio penetration rate doesn’t display the same characteristic. The radio penetration rate could be small in the towns with more households, and it could be large in those towns with less household. Therefore, penetration rate is an unbiased attribute to describe the characteristics of the towns comparing to the counts."
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#correlation-analysis",
    "href": "Chap_5/Hands-on_Ex3.html#correlation-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nAnother thing we should check before performing cluster analysis is correlation analysis. If there are highly correlated variables, we should remove one of them to avoid multicollinearity.\nLet’s plot the correlation matrix.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\n\ncorrplot.mixed(cluster_vars.cor,\n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nWe could see that computer penetration rate is positively strongly correlated with internet penetration rate with a correlation coefficient being 0.87. This makes sense because the households who own computers would get an internet broadband plan. Hence, we will exclude internet penetration rate from the cluster analysis."
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "href": "Chap_5/Hands-on_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\n\nExtracting cluster variables\nLet’s first extract the cluster variables from shan_sf simple feature data frame to a new data frame.\n\ncluster_vars <- shan_sf %>%\n  st_set_geometry(NULL) %>%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\n\nhead(cluster_vars, 10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNote that the purpose of st_set_geometry(NULL) command line is to drop the geometry information from the shan_sf simple feature data frame because we don’t need it for hierarchy analysis.\nWe have also dropped the internet penetration rate, and so the data frame only contains the remaining five penetration rates.\nNext, let’s set the row name to the township names.\n\nrow.names(cluster_vars) <- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNow let’s drop the original township column and save it as another data frame.\n\nshan_ict <- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nData standardization\nThe clustering variables need to be standardized and normalized if the variables are not in the same units and/or not in the same range. This is to avoid biased results by giving more weights to the variables with large values. There are a few methods to normalize the variables:\n\nMin-Max normalization\n\n\nshan_ict.std <- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nAll the variables have the values ranged from 0 to 1 after min-max normalization.\n\nZ-score standardization: if the variables follows normal distribution\n\n\nshan_ict.z <- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nAll the variables have mean equals to 0 and standard deviation equals to 1 after z-score standardization.\n\n\nVisualizing the standardized clustering variables\nLet’s check the distribution of the standardized variables using histogram and density plots.\n\nRadio penetration rate\n\n\nr <- ggplot(data = ict_derived, \n            aes(x = `RADIO_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `RADIO_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `RADIO_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nr <- ggplot(data = ict_derived, \n            aes(x= `RADIO_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `RADIO_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `RADIO_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nTV penetration rate\n\n\nr <- ggplot(data = ict_derived, \n            aes(x = `TV_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `TV_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `TV_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nr <- ggplot(data = ict_derived, \n            aes(x= `TV_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `TV_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `TV_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nLand line phone penetration rate\n\n\nr <- ggplot(data = ict_derived, \n            aes(x = `LLPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `LLPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `LLPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nr <- ggplot(data = ict_derived, \n            aes(x= `LLPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `LLPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `LLPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nMobile phone penetration rate\n\n\nr <- ggplot(data = ict_derived, \n            aes(x = `MPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `MPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `MPHONE_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nr <- ggplot(data = ict_derived, \n            aes(x= `MPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `MPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `MPHONE_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nComputer penetration rate\n\n\nr <- ggplot(data = ict_derived, \n            aes(x = `COMPUTER_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `COMPUTER_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `COMPUTER_PR`)) +\n  geom_histogram(bins = 20, \n                 color = \"black\", \n                 fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\nr <- ggplot(data = ict_derived, \n            aes(x= `COMPUTER_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df <- as.data.frame(shan_ict.std)\ns <- ggplot(data = shan_ict_s_df, \n            aes(x = `COMPUTER_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df <- as.data.frame(shan_ict.z)\nz <- ggplot(data = shan_ict_z_df, \n            aes(x = `COMPUTER_PR`)) +\n  geom_density(color = \"black\",\n               fill = \"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nFrom the histogram and density plots, we could tell that the min-max normalization and Z-score standardization would only change the values of the variable, but don’t change the distribution much.\n\n\nComputing proximity matrix\nSince the penetration rates are already in the same range which is from 0 to 1000, we would use the non-normalized penetration rates for cluster analysis in this exercise.\nNow, let’s compute the proximity matrix using euclidean distance.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\nComputing hierarchical clustering\nLet’s compute the cluster and draw the dendrogram.\n\nhclust_ward <- hclust(proxmat, method = 'ward.D')\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\nSelecting the optimal clustering algorithm\nThere are different ways to perform hierarchical clustering, we could use agnes() function of cluster package to identify which algorithm gives a stronger clustering structure. It calculates the agglomerative coefficient to measure the amount of clustering structure. An agglomerative coefficient being 1 indicates the strong clustering structure.\nLet’s use this function to compare four clustering methods:\n\naverage\nsingle\ncomplete\nward\n\n\nm <- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) <- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac <- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWe could see that Ward’s method gives the highest agglomerative coefficient, which means it has the strongest clustering structure. Therefore, Ward’s method will be used in the subsequent analysis.\n\n\nDetermining optimal cluster\nThere are three commonly used methods to determine the optimal clusters:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\nWe’ll use Gap Statistic Method in this exercise.\n\nset.seed(12345)\ngap_stat <- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nIt isn’t easy to identify the optimal cluster from the output directly, a better way is to plot the gap statistic again different clusters.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nTheoretically, the higher the gap statistic, the better the clusters. However, the highest gap statistic is provided at 1 cluster looking at the plot above. This doesn’t fit the purpose of clustering analysis, and a typical clustering analysis should provide at least 3 clusters. Therefore, we would choose the 6 as our number of clusters.\n\n\nInterpreting the dendrogram\nNow we have determined our number of clusters, let’s visualize them in the dendrogram.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\nWe could see that the 6 clusters have been boxed out in the dendrogram.\n\n\nVisually-driven hierarchical clustering analysis\nThe dendrogram only provides us the township names in each cluster, but there isn’t enough information to help us to describe the clusters.\nHence, we will build an interactive cluster heatmap to understand more about the clusters.\nLet’s transform the data frame into a matrix.\n\nshan_ict_mat <- data.matrix(shan_ict)\n\nNext, we plot the interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv = NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nIt would display the relevant information as our mouse moves on the interactive heatmap. With the additional information on the penetration rates, we are able to see some distictive differences among the clusters. For example, the purple cluster on the top has high penetration rates for TV, mobile phone and computer. On the other hand, the green cluster in the middle has high penetration rate for land line phone but not others.\nTherefore, 6 clusters is a good starting point for the analysis.\n\n\nMapping the clusters formed\nNow, let’s map the clusters to the townships in the simple feature data frame. This would allow us to visualize the clusters in the choropleth map.\n\ngroups <- as.factor(cutree(hclust_ward, k=6))\n\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nWe are now able to see where are the 6 clusters on the choropleth map. However, some of the townships are far away from each other although they are from the same cluster which is not good for business decision making. The reason for this is because we haven’t incorporated with geospatial information."
  },
  {
    "objectID": "Chap_5/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "href": "Chap_5/Hands-on_Ex3.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-on Exercise 3: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering: SKATER approach",
    "text": "Spatially Constrained Clustering: SKATER approach\nIn this section, we’ll learn how to derive spatially constrained clusters.\n\nConverting into SpatialPolygonsDataFrame\nLet’s first convert shan_sf simple feature data frame to SpatialPolygonsDataFrame.\n\nshan_sp <- as_Spatial(shan_sf)\n\n\n\nComputing neighbour list\nNext, we compute the neighbour list from the polygon list.\n\nshan.nb <- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nThen we plot the neighbour list on top of the community area boundaries.\n\nplot(shan_sp, \n     border = grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col = \"blue\", \n     add = TRUE)\n\n\n\n\n\n\nCalculating edge costs\nNext, we compute the cost of each edge which is the distance between its nodes.\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weight object similar to the calculation of inverse of distance weights.\n\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style = \"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nNow, let’s compute the minimum spanning tree.\n\nshan.mst <- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\nThe output of the minimum spanning tree is an matrix.\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nThe minimum spanning tree matrix has a dimension of 54 x 3.\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nNow, let’s plot the minimum spanning tree matrix on the township boundaries.\n\nplot(shan_sp, border = gray(.5))\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n         col = \"blue\", \n         cex.lab = 0.7, \n         cex.circles = 0.005, \n         add = TRUE)\n\n\n\n\nThe plot is now simplified to have one edge connecting each of the nodes.\n\n\nComputing spatially constrained clusters using SKATER method\nNow let’s compute the spatially constrained clusters.\n\nclust6 <- spdep::skater(edges = shan.mst[, 1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nNote that ncuts = 6 - 1 = 5 because it is for the cuts in the graph.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nWe could check the assignment of clusters using groups information provided in the output.\n\nccs6 <- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe could find out the number of townships in each cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nWe could also plot the pruned tree that shows the five clusters on top of the township area.\n\nplot(shan_sp, border = gray(.5))\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab = .7,\n     groups.colors=c(\"red\", \"green\", \"blue\", \"brown\", \"pink\"),\n     cex.circles = 0.005, \n     add = TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1],\ncoords[id2, : \"add\" is not a graphical parameter\n\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nLet’s now plot the newly derived clusters using SKATER method.\n\ngroups_mat <- as.matrix(clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`SP_CLUSTER` = `as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nWe plot the hierarchical clustering and spatially constrained hierarchical clustering side by side to compare the clusters.\n\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp = NA, ncol = 2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\nWe could tell that the spatially constrained hierarchical clustering gives a better clustering because the townships within each cluster are connected. This makes it easier for us to make any business interpretations.\n\n\nSaving Data for In-class Exercise\n\nwrite_rds(shan_ict, \"data/rds/shan_ict.rds\")\nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")"
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html",
    "href": "Chap_5/In-class_Ex3.html",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "",
    "text": "In this in-class exercise, I learned how to perform spatially constrained clustering using ClustGeo method."
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html#getting-started",
    "href": "Chap_5/In-class_Ex3.html#getting-started",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nsf: importing, managing and processing geospatial data.\nspdep: computing spatial weights and spatially lagged variables.\ntmap: plotting Thematic Maps.\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\nrgdal: handling geospatial data\nggpubr: facilitating ggplot2 to make more visually appealing charts\ncluster: performing cluster analysis\nfactoextra: extracting and visualizing the output of multivariate data analyses\nNbClust: determining the best number of clusters in a data set\nheatmaply: creating interactive cluster heatmaps\ncorrplot: plotting correlation matrix\npsych: handling multivariate analysis\nClustGeo:\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, rgdal, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, ClustGeo)"
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html#importing-required-data",
    "href": "Chap_5/In-class_Ex3.html#importing-required-data",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Importing Required Data",
    "text": "Importing Required Data\nWe first import the required data frames into R.\n\nshan_ict <- read_rds(\"data/rds/shan_ict.rds\")\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")"
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html#computing-proximity-matrix",
    "href": "Chap_5/In-class_Ex3.html#computing-proximity-matrix",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Computing proximity matrix",
    "text": "Computing proximity matrix\nSince the penetration rates are already in the same range which is from 0 to 1000, we would use the non-normalized penetration rates for cluster analysis in this exercise.\nNow, let’s compute the proximity matrix using euclidean distance.\n\nproxmat <- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html#wald-like-hierarchical-clustering-clustgeo",
    "href": "Chap_5/In-class_Ex3.html#wald-like-hierarchical-clustering-clustgeo",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Wald-like Hierarchical Clustering: ClustGeo",
    "text": "Wald-like Hierarchical Clustering: ClustGeo\nTo perform the non-spatially constrained hierarchical clustering, we need to provide the function a dissimilarity matrix.\n\nnongeo_cluster <- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\nMapping the clusters formed\nNow, let’s plot the clusters on top of the township boundaries.\n\ngroups <- as.factor(cutree(nongeo_cluster, k=6))\n\nshan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\nAgain, the townships within the clusters are sparsely located. Let’s now perform the spatially constrained hierarchical clustering to obtain better clustering results."
  },
  {
    "objectID": "Chap_5/In-class_Ex3.html#spatially-constrained-hierarchical-clustering",
    "href": "Chap_5/In-class_Ex3.html#spatially-constrained-hierarchical-clustering",
    "title": "In-class Exercise 3: Spatially Constrained Clustering: ClustGeo Method",
    "section": "Spatially Constrained Hierarchical Clustering",
    "text": "Spatially Constrained Hierarchical Clustering\nWe need to derive a spatial distance matrix before performing spatially constrained hierarchical clustering.\n\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n\nNext, we need to determine a suitable value for the mixing parameter alpha.\n\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K = 6, graph = TRUE)\n\n\n\n\n\n\n\nWe could use an alpha of 0.3.\n\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNow, let’s derive the cluster object.\n\ngroups <- as.factor(cutree(clustG, k = 6))\n\nThen we join the clustering groups with shan_sf polygon feature data frame.\n\nshan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the newly derived spatially contrained clusters on the township boundaries.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Chap_6/Hands-on_Ex4.html",
    "href": "Chap_6/Hands-on_Ex4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "In this hands-on exercise, I learned how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Chap_6/Hands-on_Ex4.html#getting-started",
    "href": "Chap_6/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nolsrr:\nGWmodel:\ncorrplot:\nsf: importing, managing and processing geospatial data.\ntmap: plotting Thematic Maps.\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\n\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nInstalling package into 'C:/R/R-4.2.2/library'\n(as 'lib' is unspecified)\n\n\nalso installing the dependency 'nortest'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'nortest' successfully unpacked and MD5 sums checked\npackage 'olsrr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yipin\\AppData\\Local\\Temp\\Rtmp8GTWli\\downloaded_packages\n\n\n\nolsrr installed\n\n\nInstalling package into 'C:/R/R-4.2.2/library'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'DEoptimR', 'expm', 'coda', 'LearnBayes', 'zoo', 'xts', 'intervals', 'robustbase', 'spatialreg', 'spacetime', 'FNN', 'RcppArmadillo'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'DEoptimR' successfully unpacked and MD5 sums checked\npackage 'expm' successfully unpacked and MD5 sums checked\npackage 'coda' successfully unpacked and MD5 sums checked\npackage 'LearnBayes' successfully unpacked and MD5 sums checked\npackage 'zoo' successfully unpacked and MD5 sums checked\npackage 'xts' successfully unpacked and MD5 sums checked\npackage 'intervals' successfully unpacked and MD5 sums checked\npackage 'robustbase' successfully unpacked and MD5 sums checked\npackage 'spatialreg' successfully unpacked and MD5 sums checked\npackage 'spacetime' successfully unpacked and MD5 sums checked\npackage 'FNN' successfully unpacked and MD5 sums checked\npackage 'RcppArmadillo' successfully unpacked and MD5 sums checked\npackage 'GWmodel' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yipin\\AppData\\Local\\Temp\\Rtmp8GTWli\\downloaded_packages\n\n\n\nGWmodel installed\n\n\nInstalling package into 'C:/R/R-4.2.2/library'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'V8', 'labelled', 'bigD', 'juicyjuice', 'broom.helpers', 'gt'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'V8' successfully unpacked and MD5 sums checked\npackage 'labelled' successfully unpacked and MD5 sums checked\npackage 'bigD' successfully unpacked and MD5 sums checked\npackage 'juicyjuice' successfully unpacked and MD5 sums checked\npackage 'broom.helpers' successfully unpacked and MD5 sums checked\npackage 'gt' successfully unpacked and MD5 sums checked\npackage 'gtsummary' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yipin\\AppData\\Local\\Temp\\Rtmp8GTWli\\downloaded_packages\n\n\n\ngtsummary installed"
  },
  {
    "objectID": "Chap_6/Hands-on_Ex4.html#importing-required-data",
    "href": "Chap_6/Hands-on_Ex4.html#importing-required-data",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Importing Required Data",
    "text": "Importing Required Data\n\nImporting geospatial data\nThe following codes import URA Master Plan 2014’s planning subzone boundaries shapefile into R as a polygon feature data frame.\n\nmpsz <- st_read(dsn = \"data/geospatial\",\n                 layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_6\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe imported simple feature data frame is a multipolygon object. It contains 323 features and 15 fields. In addition, it’s in SVY21 Coordinate System. However, it doesn’t have EPSG information.\n\n\nUpdating CRS information\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow the EPSG is indicated as 3414.\nWe could view the extent of the coordinates.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nImporting the aspatial data\nThe following code chunk imports Condo_resale_2015 data set into R as a tibble data frame. The data is extracted from The 2014 Myanmar Population and Housing Census Myanmar.\n\ncondo_resale <- read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe ict tibble data frame has 1436 rows and 23 columns.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nThe data looks good by verifying the first few rows.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nThe summary report shows that there isn’t any missing data in the data, and the values are in the reasonable ranges.\n\n\nConverting aspatial data frame into a sf object\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nAs the longitude and latitude variables are in decimal format, we could assume that the data is in WGS84 coordinate system. We converted it to SVY21 coordinate system so we could join it with the geospatial data.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nThe original longitude and latitude columns are now replaced by a geometry column."
  },
  {
    "objectID": "Chap_6/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Chap_6/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nLet’s do some exploration to have a better understanding on the data.\n\nEDA using statistical graphics\nFirst of all, let check the distribution of the response variable, SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe plot shows that the selling price of codo in 2015 follows a right skewed distribution, which means there are more units with a relatively lower selling price.\nWe could do a log transformation to normalize the selling price distribution if necessary.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe data in the plot above looks more like to a normal distribution now, but it’s still slightly skewed to the right.\n\n\nMultiple histogram plots distribution of variables\nNext, let’s look at the distribution of the other numerical variables.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\nThe plots above shows that some variables are following a normal distribution, for example, PROX_CBD. On the other hands, most of the variables are right skewed. For example, AGE and PROX_CHILDCARE.\n\n\nDrawing statistical point map\nNext, let’s check the geospatial distribution of the selling price.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe plot above shows that the high selling points are most in the central area. The units in east and west are in the middle, and the selling price in the north is the lowest in Singapore."
  },
  {
    "objectID": "Chap_6/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Chap_6/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\nNow, we’ll build hedonic pricing models for condo resale units.\n\nSimple Linear Regression Method\nLet’s first build a simple linear regression model using one independent variable, AREA_SQM.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe summary tells us:\n\nF-statistic: the p-value is less than 0.05, which indicates that the model is a good fit of the selling price at 5% significance level\nAdjusted R-squared: in indicates that the model is able to explain 45.15% of the variation in condo selling price\nCoefficients: the small (i.e., < 0.05) p-value indicates that AREA_SQM is a significant factor in explaining the selling price. The positive coefficient tells that it has a positive relationship with the selling price. in other words, the selling price would increase by 14,719 for every 1 square meter increase in the unit area.\n\nNow, let’s plot the best fit line on the scatterplot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe plot above shows that the model couldn’t do well for the larger units with higher resale prices.\nThe low adjusted R-square tells us that more independent variables are required to explain the selling price.\n\n\nMultiple linear regression method\nOne of the assumptions of multi-linear regression model is that all the independent variables are independent to each other. Therefore, let’s check the correlation among the independent variables to avoid multicollinearity.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThe correlation matrix tells that there are indeed two variables, Freehold and LEASE_99YEAR, are strongly negatively correlated with correlation coefficient being -0.84. Hence, we need to exclude one of them while building the model. In this exercise, we will exclude LEASE_99YEAR is excluded from the model.\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nWe’ll use all the other variables in the data frame as the independent variables in the model, except LEASE_99YEAR.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\n\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nThe summary tells us:\n\nF-statistic: the p-value is less than 0.05, which indicates that the model is a good fit of the selling price at 5% significance level\nAdjusted R-squared: in indicates that the model is able to explain 64.74% of the variation in condo selling price. There is an improvement of about 20% in the explained variation comparing to the simple linear regression model using only AREA_SQM as the independent variable.\nCoefficients: the p-values reveals that some independent variables are significant (e.g., AREA_SQM, AGE), and some are not (e.g., PROX_HAWKER_MARKET, PROX_KINDERGARTEN).\n\n\n\nPreparing publication quality table: olsrr method"
  },
  {
    "objectID": "Chap_6/In-class_Ex4.html",
    "href": "Chap_6/In-class_Ex4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "In this hands-on exercise, I learned how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Chap_6/In-class_Ex4.html#getting-started",
    "href": "Chap_6/In-class_Ex4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we need to install the required R packages.\n\nolsrr:\nGWmodel:\ncorrplot:\nsf: importing, managing and processing geospatial data.\ntmap: plotting Thematic Maps.\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\n\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Chap_6/In-class_Ex4.html#importing-required-data",
    "href": "Chap_6/In-class_Ex4.html#importing-required-data",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Importing Required Data",
    "text": "Importing Required Data\n\nImporting geospatial data\nThe following codes import URA Master Plan 2014’s planning subzone boundaries shapefile into R as a polygon feature data frame.\n\nmpsz <- st_read(dsn = \"data/geospatial\",\n                 layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Chap_6\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe imported simple feature data frame is a multipolygon object. It contains 323 features and 15 fields. In addition, it’s in SVY21 Coordinate System. However, it doesn’t have EPSG information.\n\n\nUpdating CRS information\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow the EPSG is indicated as 3414.\nWe could view the extent of the coordinates.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\nImporting the aspatial data\nThe following code chunk imports Condo_resale_2015 data set into R as a tibble data frame. The data is extracted from The 2014 Myanmar Population and Housing Census Myanmar.\n\ncondo_resale <- read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe ict tibble data frame has 1436 rows and 23 columns.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nThe data looks good by verifying the first few rows.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nThe summary report shows that there isn’t any missing data in the data, and the values are in the reasonable ranges.\n\n\nConverting aspatial data frame into a sf object\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nAs the longitude and latitude variables are in decimal format, we could assume that the data is in WGS84 coordinate system. We converted it to SVY21 coordinate system so we could join it with the geospatial data.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN\n\n\nThe original longitude and latitude columns are now replaced by a geometry column."
  },
  {
    "objectID": "Chap_6/In-class_Ex4.html#exploratory-data-analysis-eda",
    "href": "Chap_6/In-class_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nLet’s do some exploration to have a better understanding on the data.\n\nEDA using statistical graphics\nFirst of all, let check the distribution of the response variable, SELLING_PRICE.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe plot shows that the selling price of codo in 2015 follows a right skewed distribution, which means there are more units with a relatively lower selling price.\nWe could do a log transformation to normalize the selling price distribution if necessary.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe data in the plot above looks more like to a normal distribution now, but it’s still slightly skewed to the right.\n\n\nMultiple histogram plots distribution of variables\nNext, let’s look at the distribution of the other numerical variables.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\nThe plots above shows that some variables are following a normal distribution, for example, PROX_CBD. On the other hands, most of the variables are right skewed. For example, AGE and PROX_CHILDCARE.\n\n\nDrawing statistical point map\nNext, let’s check the geospatial distribution of the selling price.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe plot above shows that the high selling points are most in the central area. The units in east and west are in the middle, and the selling price in the north is the lowest in Singapore."
  },
  {
    "objectID": "Chap_6/In-class_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Chap_6/In-class_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\nNow, we’ll build hedonic pricing models for condo resale units.\n\nSimple Linear Regression Method\nLet’s first build a simple linear regression model using one independent variable, AREA_SQM.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe summary tells us:\n\nF-statistic: the p-value is less than 0.05, which indicates that the model is a good fit of the selling price at 5% significance level\nAdjusted R-squared: in indicates that the model is able to explain 45.15% of the variation in condo selling price\nCoefficients: the small (i.e., < 0.05) p-value indicates that AREA_SQM is a significant factor in explaining the selling price. The positive coefficient tells that it has a positive relationship with the selling price. in other words, the selling price would increase by 14,719 for every 1 square meter increase in the unit area.\n\nNow, let’s plot the best fit line on the scatterplot.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe plot above shows that the model couldn’t do well for the larger units with higher resale prices.\nThe low adjusted R-square tells us that more independent variables are required to explain the selling price.\n\n\nMultiple linear regression method\nOne of the assumptions of multi-linear regression model is that all the independent variables are independent to each other. Therefore, let’s check the correlation among the independent variables to avoid multicollinearity.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThe correlation matrix tells that there are indeed two variables, Freehold and LEASE_99YEAR, are strongly negatively correlated with correlation coefficient being -0.84. Hence, we need to exclude one of them while building the model. In this exercise, we will exclude LEASE_99YEAR is excluded from the model.\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nWe’ll use all the other variables in the data frame as the independent variables in the model, except LEASE_99YEAR.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\n\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nThe summary tells us:\n\nF-statistic: the p-value is less than 0.05, which indicates that the model is a good fit of the selling price at 5% significance level\nAdjusted R-squared: in indicates that the model is able to explain 64.74% of the variation in condo selling price. There is an improvement of about 20% in the explained variation comparing to the simple linear regression model using only AREA_SQM as the independent variable.\nCoefficients: the p-values reveals that some independent variables are significant (e.g., AREA_SQM, AGE), and some are not (e.g., PROX_HAWKER_MARKET, PROX_KINDERGARTEN).\n\n\n\nPreparing publication quality table: olsrr method"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "In Singapore, people are used to access clean water any where and any time. The convenience of getting clean water makes some people forget how precious clean water is, can how difficult it is for people living in other countries to use clean water.\nNigeria is one of the countries still facing severe water crisis, and about one third of the children there don’t have enough water to meet their daily needs.\nIn this take-home exercise, we are going to analyze the water point related data in Nigeria to reveal the spatial patterns of Not Functional water points."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#problem-statement",
    "href": "Take-home_Ex1/Take-home_Ex1.html#problem-statement",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nApply global measures of spatial association techniques to study if the Not Functional water points are evenly distributed across Nigeria\nApply local measures of spatial association techniques to study if there are any area having more Not Functional water points"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Getting Started",
    "text": "Getting Started\n\nData sources\n\nAspatial Data\n\nA set of a spatial data containing the water point related information is downloaded from Water Point Data Exchange (WPdx) website.\nThe original data set contains the data from 17 countries, and only the subset of Nigeria is used for the analysis in this exercise.\n\nGeospatial Data\n\nNigeria Level-2 Administrative Boundary polygon features GIS data downloaded from geoBoundaries will be used in this exercise.\n\n\nLoading R Packages\nFirst of all, let’s load the required R packages into R:\n\nsf: importing, managing and processing geospatial data.\nspdep: computing spatial weights and spatially lagged variables.\ntmap: plotting Thematic Maps\ntidyverse: importing, wrangling and visualizing data. It consists of a family of R packages, including readr, readxl, tidyr, dplyr and ggplot2.\nstringr: transforming text data\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, stringr)\n\n\n\nImporting Data\nAspatial Data\nLet’s import the aspatial data containing the water point information.\n\nwp <- read_csv(\"Data/Water_Point_Data_Exchange-Plus_WPdx.csv\")\n\nThe data set contains 406,566 rows and 70 columns.\n\ntable(wp$`#clean_country_name`)\n\n#| eval: false\nlength(table(wp$`#clean_country_name`))\n\nThe aspatial data set contains data from 17 countries, and Nigeria consists of 95,008 rows.\nNow, let’s get the subset of Nigeria.\n\nwp <- subset(wp, `#clean_country_name` == \"Nigeria\")\n\n#| eval: false\nlist(wp)\n\nThe subset now contains only data for Nigeria, and it has 95,008 rows and 70 columns.\nAs we are interested to study the non-functional water points, let’s create a new column to indicate if the water points are functional or non-functional.\n\n# Extract the first word from #status column\nwp$status_n <- word(wp$`#status`, 1)\n\n#| eval: false\nunique(wp$status_n)\n\nNow let’s save the data set with the selected columns.\n\nwp <- wp %>% select(c(`#lat_deg`,\n                `#lon_deg`,\n                `#clean_adm2`,\n                status_n,\n                `#water_source_category`,\n                `#water_tech_category`,\n                `#install_year`,\n                `#management_clean`,\n                `#subjective_quality`,\n                water_point_population,\n                local_population_1km,\n                crucialness_score\n))\n\n\nwrite_csv(wp, \"Data/Water_Point_Nigeria.csv\")\n\nWe could now clear the R environment to release unused memory.\nLet’s import the data again for analysis.\n\nwp <- read_csv(\"Data/Water_Point_Nigeria.csv\")\n\nThe data now contains 95,008 rows and the selected 12 columns.\nLet’s take a look at some data in the wp data frame to check if the data is imported correctly.\n\nlist(wp)\n\nWe could notice that latitude and longitude columns contains decimal values. Hence, it’s reasonable to assume they are in WGS 84 Geographic Coordinate System.\nNow, let’s convert the data frame into a simple feature data frame.\n\nwp_sf <- st_as_sf(wp,\n                  coords = c(\"#lon_deg\", \"#lat_deg\"),\n                  crs = 4326)\n\nLet’s take a look at the new simple feature data frame.\n\nglimpse(wp_sf)\n\nWe have a new column, geometry, added into the simple feature data frame. The original latitude and longitude columns have been dropped.\nGeospatial Data\nNext, let’s import the geospatial data into R as a polygon feature data.\n\nnga <- st_read(dsn = \"Data/geoBoundaries-NGA-ADM2-all\",\n               layer = \"geoBoundaries-NGA-ADM2\")\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\MITB_SunYP\\ISSS624\\Take-home_Ex1\\Data\\geoBoundaries-NGA-ADM2-all' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nWe can see that this geospatial data is a multipolygon features object. It contains 774 multipolygon features and 5 fields. It is in WGS 84 coordinates system, and the bounding box provides the x and y extends of the data.\nNow, let’s check if there are any duplicated polygons in the geospatial data.\n\nn_occur <- data.frame(table(nga$shapeName))\nn_occur[n_occur$Freq > 1,]\n\n        Var1 Freq\n94     Bassa    2\n303 Ifelodun    2\n353 Irepodun    2\n516 Nasarawa    2\n542      Obi    2\n688 Surulere    2\n\nnga[nga$shapeName %in% n_occur$Var1[n_occur$Freq > 1], ]\n\nSimple feature collection with 12 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 3.316459 ymin: 6.459038 xmax: 9.020704 ymax: 12.05035\nGeodetic CRS:  WGS 84\nFirst 10 features:\n    shapeName Level                    shapeID shapeGroup shapeType\n94      Bassa  ADM2 NGA-ADM2-72505758B95534398        NGA      ADM2\n95      Bassa  ADM2 NGA-ADM2-72505758B52690633        NGA      ADM2\n304  Ifelodun  ADM2 NGA-ADM2-72505758B26581542        NGA      ADM2\n305  Ifelodun  ADM2 NGA-ADM2-72505758B18326272        NGA      ADM2\n355  Irepodun  ADM2 NGA-ADM2-72505758B75034141        NGA      ADM2\n356  Irepodun  ADM2 NGA-ADM2-72505758B79178637        NGA      ADM2\n519  Nasarawa  ADM2  NGA-ADM2-72505758B6786568        NGA      ADM2\n520  Nasarawa  ADM2 NGA-ADM2-72505758B67188591        NGA      ADM2\n546       Obi  ADM2  NGA-ADM2-72505758B7318634        NGA      ADM2\n547       Obi  ADM2  NGA-ADM2-72505758B3073896        NGA      ADM2\n                          geometry\n94  MULTIPOLYGON (((6.708541 7....\n95  MULTIPOLYGON (((8.823522 10...\n304 MULTIPOLYGON (((4.664107 8....\n305 MULTIPOLYGON (((4.721977 7....\n355 MULTIPOLYGON (((5.05493 8.0...\n356 MULTIPOLYGON (((4.543349 7....\n519 MULTIPOLYGON (((8.554589 11...\n520 MULTIPOLYGON (((7.493228 8....\n546 MULTIPOLYGON (((8.191919 6....\n547 MULTIPOLYGON (((9.008576 8....\n\n\nIndeed, the table above shows that there are 6 pairs of duplicated polygons. However, they have different geometry values which means they are not the same regions.\nLet’s view those polygons with duplicated shapename in the map to validate our findings.\n\nnga_new <- left_join(nga, n_occur, by = c(\"shapeName\" = \"Var1\"))\n\ntm_shape(nga_new) +\n  tm_polygons(\"Freq\")\n\n\n\n\nIndeed, those polygons are different although they have the same shapename. Let’s use label the polygons with shapeID which contains unique IDs for easy identification.\n\ntm_shape(nga_new) +\n  tm_polygons() +\n  tm_shape(filter(nga_new, Freq == 2)) +\n  tm_polygons(\"shapeID\") +\n  tm_legend(legend.outside=TRUE)\n\nLegend labels were too wide. The labels have been resized to 0.62, 0.62, 0.64, 0.62, 0.62, 0.64, 0.62, 0.64, 0.64, 0.62, 0.62, 0.62. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\nBy referencing to cirad Aware webpage for Nigeria administrative boundaries (level 2) (link) which is an interactive webpage to view geospatial data, we are able to identify the correct names for the polygons.\n\n\n\n\n\n\n\n\nshapeID\nOriginal shapeName\nCorrect shapeName\n\n\n\n\nNGA-ADM2-72505758B95534398\nBassa\nBassa (Kogi)\n\n\nNGA-ADM2-72505758B52690633\nBassa\nBassa (Plateau)\n\n\nNGA-ADM2-72505758B26581542\nIfelodun\nIfelodun (Kwara)\n\n\nNGA-ADM2-72505758B18326272\nIfelodun\nIfelodun (Osun)\n\n\nNGA-ADM2-72505758B75034141\nIrepodun\nIrepodun (Kwara)\n\n\nNGA-ADM2-72505758B79178637\nIrepodun\nIrepodun (Osun)\n\n\nNGA-ADM2-72505758B6786568\nNasarawa\nNasarawa (Kano)\n\n\nNGA-ADM2-72505758B67188591\nNasarawa\nNasarawa (Nasarawa)\n\n\nNGA-ADM2-72505758B7318634\nObi\nObi (Benue)\n\n\nNGA-ADM2-72505758B3073896\nObi\nObi (Nasarawa)\n\n\nNGA-ADM2-72505758B6675111\nSurulere\nSurulere (Lagos)\n\n\nNGA-ADM2-72505758B31597260\nSurulere\nSurulere (Oyo)\n\n\n\nNow, let’s correct the shape names for the polygons with duplicated names.\n\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B95534398\"] <- \"Bassa (Kogi)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B52690633\"] <- \"Bassa (Plateau)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B26581542\"] <- \"Ifelodun (Kwara)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B18326272\"] <- \"Ifelodun (Osun)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B75034141\"] <- \"Irepodun (Kwara)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B79178637\"] <- \"Irepodun (Osun)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B6786568\"] <- \"Nasarawa (Kano)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B67188591\"] <- \"Nasarawa (Nasarawa)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B7318634\"] <- \"Obi (Benue)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B3073896\"] <- \"Obi (Nasarawa)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B6675111\"] <- \"Surulere (Lagos)\"\nnga_new$shapeName[nga_new$shapeID == \"NGA-ADM2-72505758B31597260\"] <- \"Surulere (Oyo)\"\n\nnga_new <- nga_new[, 1:5]\n\nLet’s check if the shape names are unique now.\n\nn_occur <- data.frame(table(nga_new$shapeName))\nn_occur[n_occur$Freq > 1,]\n\n[1] Var1 Freq\n<0 rows> (or 0-length row.names)\n\nnga_new[nga_new$shapeName %in% n_occur$Var1[n_occur$Freq > 1], ]\n\nSimple feature collection with 0 features and 5 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] shapeName  Level      shapeID    shapeGroup shapeType  geometry  \n<0 rows> (or 0-length row.names)\n\n\nThe report above shows that the shape names are unique now."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#extracting-information-about-non-functional-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#extracting-information-about-non-functional-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Extracting Information about Non-Functional Water Points",
    "text": "Extracting Information about Non-Functional Water Points\nSince we know the status of all the water points, we are able to calculate the total number of water points in each region as well as the non-functional water points. However, the absolute counts might lead us to the biased analysis result because the chance of having more non-functional water points are higher for regions having more water points. Therefore, we’ll use the percentage of non-functional water points to understand the distribution.\n\nExtracting Non-Functional Water Points\nLet’s extract the data of non-functional water points.\n\nwp_nonfunc <- wp_sf %>% filter(status_n == \"Non-functional\")\n\n\n\nPerform Point-in-Polygon Count\nLet’s add the count of the total water points and the non-functional water points into the geospatial data.\n\nnga_wp <- nga_new %>% \n  mutate(total_wpt = lengths(\n    st_intersects(nga_new, wp_sf)\n  )) %>%\n  mutate(wpt_nonfunc = lengths(\n    st_intersects(nga_new, wp_nonfunc)\n  ))\n\nLet’s also calculate the percentage of non-functional water points.\n\nnga_wp <- nga_wp %>%\n  mutate(wpt_nonfunc_pct = wpt_nonfunc / total_wpt)\n\n\n\nSaving the Analytical Data Table\nNow we have prepared the analytical data table. Let’s save the simple feature data table into rds format.\n\nwrite_rds(nga_wp, \"Data/nga_wp.rds\")\n\nWe could now again clear the R environment and release the unused memory."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Visualizing the Spatial Distribution of Water Points",
    "text": "Visualizing the Spatial Distribution of Water Points\nLet’s first import the analytical data back into R.\n\nnga_wp <- read_rds(\"Data/nga_wp.rds\")\n\n\nVisualizing Non-Functional Water Points\nLet’s take a look at the distribution of the non-functional water points in Nigeria.\n\nnon_functional_count <- tm_shape(nga_wp) +\n                          tm_fill(\"wpt_nonfunc\",\n                                  style = \"quantile\",\n                                  title = \"Count\") +\n                          tm_layout(main.title = \"Distribution of Non-Function Water Points in Nigeria (Count)\",\n                                    main.title.position = \"center\",\n                                    main.title.size = 0.8,\n                                    legend.height = 0.3,\n                                    legend.width = 0.2,\n                                    legend.title.size = 0.8,\n                                    legend.text.size = 0.4,\n                                    frame = TRUE) +\n                          tm_borders(alpha = 0.5) +\n                          tm_scale_bar() +\n                          tm_grid(alpha = 0.2)\n\nnon_functional_pct <- tm_shape(nga_wp) +\n                          tm_fill(\"wpt_nonfunc_pct\",\n                                  style = \"quantile\",\n                                  title = \"Percentage\") +\n                          tm_layout(main.title = \"Distribution of Non-Function Water Points in Nigeria (%)\",\n                                    main.title.position = \"center\",\n                                    main.title.size = 0.8,\n                                    legend.height = 0.3,\n                                    legend.width = 0.2,\n                                    legend.title.size = 0.8,\n                                    legend.text.size = 0.4,\n                                    frame = TRUE) +\n                          tm_borders(alpha = 0.5) +\n                          tm_scale_bar() +\n                          tm_grid(alpha = 0.2)\n\ntmap_arrange(non_functional_count, non_functional_pct, asp=1, ncol=2)\n\n\n\n\nThe plot on the left shows that eastern, central and western Nigeria have higher number of non-functional water points. However, people from southern and north-western parts of Nigeria might be facing a more severe water crisis because the proportion of non-functional water points in those area is high.\nThe plots also tells us that the percentage of non-functional water points is a better indicator to understand the distribution of the non-functional water points."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, we’ll test if the non-functional water points are evenly distributed across Nigeria by:\n\nCalculating global spatial autocorrelation statistics\nConducting spatial complete randomness test\n\n\nComputing contiguity spatial weights\nWe first need to cconstruct the spatial weights matrix to define the neighbourhood relationship among the regions. In this exercise, we will use Queen criteria to define the neighbours.\n\nwm_q <- poly2nb(nga_wp, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report tells us that there are 774 regions in Nigeria, and there is one region without any neighbours. Among the rest of the regions, there are two least connected regions with 1 neighbour each, and 1 most connected region with 14 neighbours.\n\n\nRow-standardized weights matrix\nNext, we need to assign the weights to each neighbouring region. In this exercise, we assign equal weights to each neighbouring region.\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nprint(rswm_q, zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nNow, we are ready to conduct Moran’s I statistics test.\nNull hypothesis: the non-functional water points are randomly disbursed\nAlternative hypothesis: the non-functional water points are spatially clustered\n\n\nMoran’s I test\n\nmoran.test(nga_wp$wpt_nonfunc_pct, \n           listw = rswm_q, \n           zero.policy = TRUE, \n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$wpt_nonfunc_pct  \nweights: rswm_q \nomitted: 3, 86, 241, 250, 252, 261, 400, 406, 447, 473, 492, 507, 526   \n\nMoran I statistic standard deviate = 21.027, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4628161249     -0.0013157895      0.0004872151 \n\n\nThe p-value is less than 0.5, and we have enough evidence to reject the null hypothesis at 5% significance level. We are able to conclude that the non-functional water points are spatially clustered.\nComputing Monte Carlo Moran’s I\nTo test is the Moran’s I statistic is significant, we’ll perform a permutation test with 1000 simulations.\n\nset.seed(1234)\nbperm = moran.mc(nga_wp$wpt_nonfunc_pct, \n                 listw = rswm_q, \n                 nsim = 999, \n                 zero.policy = TRUE, \n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$wpt_nonfunc_pct \nweights: rswm_q \nomitted: 3, 86, 241, 250, 252, 261, 400, 406, 447, 473, 492, 507, 526 \nnumber of simulations + 1: 1000 \n\nstatistic = 0.46221, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe p-value is less than 0.05, and we have enough evidence to reject the null hypothesis at 5% significance level. We could conclude that Moran’s I statistic is significant, and the non-functional water points are indeed spatially clustered.\nVisualizing Monte Carlo Moran’s I\nWe could also plot the simulated Moran’s I statistics to analyze its significance.\n\nsummary(bperm$res[1:999])\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.079821 -0.015777 -0.001772 -0.001140  0.012762  0.084960 \n\n\nThe summary report shows that the simulated Moran’s I statistic has a mean of -0.001140. The smallest Moran’s I statistic is -0.079821. and the largest is 0.084960.\n\nvar(bperm$res[1:999])\n\n[1] 0.0004987204\n\n\nFurthermore, the simulated Moran’s I statistic has a variance of 0.000499.\n\nhist(bperm$res, \n     freq = TRUE, \n     breaks = 20, \n     xlab= \"Simulated Moran's I\")\nabline(v = 0, \n       col = \"red\") \n\n\n\n\nThe histogram above shows the distribution of Moran’s I values we could expect if the non-functional water points are randomly distributed across Nigeria. According to the Moran’s I test we performed earlier, the Moran’s I statistic is 0.463 which is far away to the right to the histogram. Hence, we could conclude that the Moran’s I statistic of 0.463 is significant, and the non-functional water points are spatially clustered."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#spatial-correlagram",
    "href": "Take-home_Ex1/Take-home_Ex1.html#spatial-correlagram",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Spatial Correlagram",
    "text": "Spatial Correlagram\nNext, let’s check if the non-functional water points rates are correlated at different lags (i.e. distance) based on Moran’s I test.\n\nComputing Moran’s I correlogram\nLet’s compute a 6-lag spatial correlogram of non-functional water points. As NA is not allowed in sp.correlogram function, we’ll replace all the NA in wpt_nonfunc_pct variable to 0.\n\nnga_wp <- nga_wp %>% mutate_at(vars(wpt_nonfunc_pct), ~replace_na(., 0))\n\n\nMI_corr <- sp.correlogram(wm_q, \n                          nga_wp$wpt_nonfunc_pct, \n                          order = 6, \n                          method = \"I\", \n                          style = \"W\",\n                          zero.policy = TRUE)\nplot(MI_corr)\n\n\n\n\nLet’s also check the p values at each lag.\n\nprint(MI_corr)\n\nSpatial correlogram for nga_wp$wpt_nonfunc_pct \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.8408e-01 -1.2953e-03  4.7375e-04          22.2997       < 2.2e-16\n2 (773)  3.8123e-01 -1.2953e-03  2.0301e-04          26.8472       < 2.2e-16\n3 (773)  2.8262e-01 -1.2953e-03  1.2246e-04          25.6559       < 2.2e-16\n4 (773)  1.7152e-01 -1.2953e-03  8.8004e-05          18.4213       < 2.2e-16\n5 (773)  8.7205e-02 -1.2953e-03  6.9105e-05          10.6461       < 2.2e-16\n6 (773)  5.0029e-02 -1.2953e-03  5.7652e-05           6.7596       1.384e-11\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe report shows that the p-values at all legs are less than 0.05, and we have enough evidence to conclude that the non-functional water points rates are significantly correlated among nearby neighbours at 5% significance level. This validates our conclusion from the previous section that the non-functional water points are spatially clustered."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nWe know by now that there are spatial clusters in terms of non-functional water point rates in Nigeria. Next, we need to to identify the clusters and find out if there are any outliers in terms of non-functional water point rates.\n\nComputing local Moran’s I\nLet’s compute the local Moran’s I statistic.\n\nfips <- order(nga_wp$shapeName)\nlocalMI <- localmoran(nga_wp$wpt_nonfunc_pct, \n                      rswm_q,\n                      zero.policy = TRUE, \n                      na.action=na.omit)\nhead(localMI)\n\n         Ii          E.Ii    Var.Ii      Z.Ii Pr(z != E(Ii))\n1 0.6189896 -0.0008766162 0.1688180 1.5086505    0.131388115\n2 0.3608480 -0.0004372973 0.1124812 1.0772346    0.281375469\n3 2.9224417 -0.0037806491 0.9692024 2.9723510    0.002955286\n4 0.2754805 -0.0016933157 0.1854626 0.6436119    0.519827110\n5 1.1323068 -0.0007913888 0.1217758 3.2470357    0.001166138\n6 0.5221821 -0.0009284501 0.1017676 1.6397917    0.101048480\n\n\nNext, let’s list the local Moran’I statistic by each region.\n\nprintCoefmat(data.frame(\n  localMI[fips, ], \n  row.names = nga_wp$shapeName[fips]),\n  check.names = FALSE)\n\n                             Ii        E.Ii      Var.Ii        Z.Ii\nAba North            6.1899e-01 -8.7662e-04  1.6882e-01  1.5087e+00\nAba South            3.6085e-01 -4.3730e-04  1.1248e-01  1.0772e+00\nAbadam               2.9224e+00 -3.7806e-03  9.6920e-01  2.9724e+00\nAbaji                2.7548e-01 -1.6933e-03  1.8546e-01  6.4361e-01\nAbak                 1.1323e+00 -7.9139e-04  1.2178e-01  3.2470e+00\nAbakaliki            5.2218e-01 -9.2845e-04  1.0177e-01  1.6398e+00\nAbeokuta North      -2.0482e-01 -2.0809e-04  2.6664e-02 -1.2530e+00\nAbeokuta South       1.1582e-01 -1.8963e-04  3.6544e-02  6.0684e-01\nAbi                 -3.5767e-02 -5.7252e-05  8.8162e-03 -3.8031e-01\nAboh-Mbaise          1.1380e-02 -3.9656e-05  4.3505e-03  1.7313e-01\nAbua/Odual           2.4503e-04 -1.7066e-05  1.8723e-03  6.0573e-03\nAbuja Municipal      1.0762e-01 -9.9585e-04  9.5380e-02  3.5169e-01\nAdavi                7.5291e-01 -1.1632e-03  1.7893e-01  1.7827e+00\nAdo                 -2.1340e-02 -2.0843e-04  1.9979e-02 -1.4950e-01\nAdo-Odo/Ota         -1.0901e-01 -1.1454e-04  1.2565e-02 -9.7143e-01\nAdo Ekiti           -3.6075e-02 -1.6482e-04  2.5377e-02 -2.2542e-01\nAfijio               1.2820e-02 -2.0323e-06  5.2298e-04  5.6069e-01\nAfikpo North         1.0775e-02 -9.4972e-05  1.4624e-02  8.9889e-02\nAfikpo South         5.8345e-02 -6.0255e-04  7.7179e-02  2.1219e-01\nAgaie               -6.1870e-02 -5.5799e-04  8.5881e-02 -2.0922e-01\nAgatu                1.9712e+00 -2.8329e-03  4.3502e-01  2.9929e+00\nAgege                1.0813e+00 -2.5016e-03  6.4213e-01  1.3525e+00\nAguata               7.7235e-01 -1.1778e-03  1.8116e-01  1.8174e+00\nAgwara               1.7977e-01 -1.0163e-04  1.9586e-02  1.2852e+00\nAhiazu-Mbaise        7.9989e-02 -1.4229e-04  1.5609e-02  6.4138e-01\nAhoada East         -5.5026e-01 -8.4535e-04  1.6280e-01 -1.3617e+00\nAhoada West         -4.8586e-01 -3.7806e-03  5.8001e-01 -6.3300e-01\nAiyedade            -3.1513e-03 -4.0665e-05  4.4612e-03 -4.6572e-02\nAiyedire             3.6898e-02 -2.9616e-05  3.2491e-03  6.4785e-01\nAiyekire (Gbonyin)   7.8197e-03 -2.1414e-06  2.0530e-04  5.4590e-01\nAjaokuta             9.1967e-01 -1.7434e-03  2.2305e-01  1.9510e+00\nAjeromi-Ifelodun     1.3713e+00 -1.5983e-03  4.1063e-01  2.1425e+00\nAjingi               1.0175e+00 -8.9818e-04  1.1501e-01  3.0028e+00\nAkamkpa              4.9811e-02 -1.0307e-05  1.1308e-03  1.4815e+00\nAkinyele             2.9814e-02 -8.1189e-06  8.9074e-04  9.9921e-01\nAkko                 7.3147e-01 -1.2759e-03  1.2217e-01  2.0964e+00\nAkoko-Edo            7.0085e-01 -7.4650e-04  5.1807e-02  3.0824e+00\nAkoko North East     5.3616e-01 -8.6871e-04  9.5226e-02  1.7403e+00\nAkoko North West    -1.0078e-02 -1.6547e-03  3.1842e-01 -1.4928e-02\nAkoko South East     1.5956e+00 -3.0726e-03  5.9041e-01  2.0806e+00\nAkoko South West     7.7873e-01 -1.0274e-03  1.5806e-01  1.9614e+00\nAkpabuyo             4.5342e-01 -8.5567e-04  1.6479e-01  1.1191e+00\nAkuku Toru          -7.6072e-02 -1.5190e-04  3.9083e-02 -3.8403e-01\nAkure North          1.7532e-01 -1.3958e-03  1.7864e-01  4.1811e-01\nAkure South         -1.0788e+00 -1.4857e-03  3.8175e-01 -1.7437e+00\nAkwanga             -2.5160e-01 -4.5530e-04  8.7719e-02 -8.4798e-01\nAlbasu               2.9885e-01 -9.2755e-05  1.4283e-02  2.5014e+00\nAleiro               7.1899e-02 -1.1273e-04  2.1727e-02  4.8854e-01\nAlimosho             4.6979e-01 -5.1614e-04  5.6597e-02  1.9769e+00\nAlkaleri            -3.5057e-02 -1.2770e-04  1.2242e-02 -3.1569e-01\nAmuwo-Odofin         7.8544e-01 -7.3297e-04  7.0220e-02  2.9668e+00\nAnambra East         2.1589e-01 -4.6601e-04  5.9698e-02  8.8550e-01\nAnambra West        -3.0110e-02 -5.3546e-05  5.1333e-03 -4.1950e-01\nAnaocha              7.3139e-01 -8.1155e-04  8.8964e-02  2.4548e+00\nAndoni              -4.3156e-01 -2.4851e-03  6.3791e-01 -5.3722e-01\nAninri               8.5136e-01 -3.7806e-03  5.8001e-01  1.1228e+00\nAniocha North       -5.8900e-01 -2.8329e-03  5.4449e-01 -7.9437e-01\nAniocha South       -2.9009e-01 -4.7433e-04  5.2015e-02 -1.2699e+00\nAnka                 8.7116e-02 -4.0767e-04  6.2754e-02  3.4939e-01\nAnkpa                2.7900e+00 -4.7827e-03  5.2221e-01  3.8675e+00\nApa                  2.2555e+00 -1.9714e-03  3.0300e-01  4.1011e+00\nApapa                1.8752e+00 -3.7806e-03  4.8271e-01  2.7045e+00\nArdo-Kola           -1.3143e-02 -4.6914e-05  6.0124e-03 -1.6890e-01\nArewa-Dandi          1.0172e-02 -2.0922e-07  2.0058e-05  2.2712e+00\nArgungu              8.3147e-02 -3.2145e-04  4.9486e-02  3.7522e-01\nArochukwu           -2.3900e-01 -1.7710e-04  2.2694e-02 -1.5853e+00\nAsa                 -4.1493e-02 -1.1223e-04  1.2311e-02 -3.7295e-01\nAsari-Toru           3.4523e-01 -1.5619e-03  6.0273e-01  4.4669e-01\nAskira/Uba           4.3727e-01 -7.8565e-04  6.6813e-02  1.6947e+00\nAtakumosa East       1.1913e-01 -9.0262e-05  1.3899e-02  1.0113e+00\nAtakumosa West       9.9991e-02 -1.1146e-04  9.4855e-03  1.0278e+00\nAtiba                1.4890e-01 -2.8675e-04  2.7484e-02  8.9991e-01\nAtigbo              -2.4733e-01 -2.8444e-04  3.6445e-02 -1.2941e+00\nAugie                2.5138e-01 -2.4206e-04  3.1016e-02  1.4288e+00\nAuyo                 1.3434e+00 -1.9498e-03  2.1350e-01  2.9116e+00\nAwe                  1.0541e-01 -1.5677e-04  1.5027e-02  8.6119e-01\nAwgu                 1.7746e-01 -7.2984e-05  9.3533e-03  1.8357e+00\nAwka North           2.2509e-01 -3.7806e-03  4.1321e-01  3.5604e-01\nAwka South           3.9881e-01 -5.1855e-04  7.9815e-02  1.4135e+00\nAyamelum            -1.0037e+00 -1.4124e-03  2.1720e-01 -2.1506e+00\nBabura               3.8879e-01 -1.1667e-03  1.7945e-01  9.2054e-01\nBadagry              1.0576e-01 -4.5239e-04  1.1636e-01  3.1138e-01\nBade                 8.0049e-01 -7.6878e-04  1.4807e-01  2.0823e+00\nBagudo              -1.6322e-01 -2.1977e-05  3.3843e-03 -2.8052e+00\nBagwai               8.2852e-01 -1.0233e-03  1.1216e-01  2.4770e+00\nBakassi              0.0000e+00  0.0000e+00  0.0000e+00         NaN\nBakori               6.8880e-01 -2.2268e-03  2.8476e-01  1.2950e+00\nBakura               1.7292e-01 -2.1201e-03  2.7115e-01  3.3616e-01\nBalanga             -9.2463e-02 -2.0974e-04  2.3007e-02 -6.0821e-01\nBali                 3.1172e-02 -1.1369e-04  9.6752e-03  3.1807e-01\nBama                 2.9224e+00 -3.7806e-03  7.2596e-01  3.4344e+00\nBarikin Ladi         1.3592e-03 -2.3503e-06  3.0122e-04  7.8447e-02\nBaruten              2.5388e-02 -1.4095e-04  1.8063e-02  1.8995e-01\nBassa (Kogi)         1.1090e+00 -1.5657e-03  1.4987e-01  2.8688e+00\nBassa (Plateau)      2.0397e-01 -3.3320e-04  4.2691e-02  9.8879e-01\nBatagarawa          -2.0068e-02 -3.0263e-05  3.3202e-03 -3.4775e-01\nBatsari              3.7413e-02 -3.0969e-05  4.7690e-03  5.4221e-01\nBauchi               3.7840e-01 -6.7409e-04  1.0374e-01  1.1769e+00\nBaure               -1.1705e-01 -2.6405e-05  4.0662e-03 -1.8352e+00\nBayo                 1.3387e-01 -1.2770e-04  1.9663e-02  9.5556e-01\nBebeji               5.6543e-01 -1.8149e-03  2.7898e-01  1.0739e+00\nBekwara             -5.0176e-02 -9.3749e-05  1.4436e-02 -4.1683e-01\nBende               -1.0030e-01 -3.4114e-04  3.2695e-02 -5.5280e-01\nBiase                1.3094e-01 -2.1596e-04  2.0701e-02  9.1162e-01\nBichi                2.6730e-01 -7.2984e-05  9.3533e-03  2.7646e+00\nBida                -2.7422e-01 -1.6054e-03  6.1950e-01 -3.4636e-01\nBilliri              1.3346e-01 -8.2046e-04  1.5801e-01  3.3780e-01\nBindawa              4.3943e-01 -7.7481e-04  9.9226e-02  1.3975e+00\nBinji                6.1984e-01 -2.1828e-03  2.7915e-01  1.1773e+00\nBiriniwa             1.0725e+00 -1.0523e-03  1.3473e-01  2.9249e+00\nBirni Kudu           1.1721e+00 -1.8567e-03  1.7768e-01  2.7850e+00\nBirnin-Gwari         1.0847e+00 -3.4885e-03  2.6593e-01  2.1101e+00\nBirnin Kebbi        -6.1679e-01 -1.4857e-03  1.9013e-01 -1.4111e+00\nBirnin Magaji        3.7549e-01 -5.8735e-04  7.5233e-02  1.3711e+00\nBiu                  1.2619e+00 -3.7806e-03  3.6109e-01  2.1062e+00\nBodinga              3.3366e-01 -4.4248e-04  6.8111e-02  1.2802e+00\nBogoro               5.0769e-01 -6.4558e-04  1.6602e-01  1.2476e+00\nBoki                 1.9954e-04 -1.1865e-09  1.8272e-07  4.6681e-01\nBokkos              -4.0479e-02 -3.4114e-04  4.3707e-02 -1.9199e-01\nBoluwaduro           4.8942e-02 -4.2769e-05  8.2433e-03  5.3953e-01\nBomadi               2.8040e+00 -4.5649e-03  6.9977e-01  3.3575e+00\nBonny                3.2909e-01 -3.7806e-03  4.8271e-01  4.7910e-01\nBorgu               -2.8473e-01 -4.6900e-04  3.9898e-02 -1.4231e+00\nBoripe               1.7316e-01 -3.6865e-04  4.7230e-02  7.9848e-01\nBosso               -1.7520e-01 -5.7449e-04  7.3587e-02 -6.4373e-01\nBrass                2.9100e+00 -4.0517e-03  1.5596e+00  2.3334e+00\nBuji                 7.9587e-01 -1.6035e-03  2.4654e-01  1.6061e+00\nBukkuyum            -1.1608e-02 -1.8743e-04  2.8858e-02 -6.7231e-02\nBungudu              9.3154e-02 -5.4887e-05  7.0341e-03  1.1113e+00\nBunkure              3.3113e-01 -4.3435e-04  4.7633e-02  1.5192e+00\nBunza                1.2451e+00 -1.3459e-03  2.0699e-01  2.7398e+00\nBursari              8.9281e-01 -8.7361e-04  8.3682e-02  3.0894e+00\nBuruku               2.3798e-02 -4.8289e-05  6.1887e-03  3.0313e-01\nBurutu               6.5883e-01 -1.5022e-04  2.8950e-02  3.8730e+00\nBwari                2.2528e-01 -5.3309e-04  1.0270e-01  7.0466e-01\nCalabar-Municipal   -2.0207e-01 -4.8010e-05  1.2354e-02 -1.8176e+00\nCalabar South        6.1826e-01 -2.6681e-03  5.1289e-01  8.6702e-01\nChanchaga           -6.3191e-01 -1.1632e-03  8.9930e-01 -6.6512e-01\nCharanchi            1.4817e-01 -3.4926e-04  4.4747e-02  7.0209e-01\nChibok               7.6936e-01 -3.9099e-04  1.0058e-01  2.4272e+00\nChikun               1.0977e+00 -1.2228e-02  1.1580e+00  1.0314e+00\nDala                -1.3235e-01 -2.1132e-05  4.0732e-03 -2.0735e+00\nDamaturu             1.4863e+00 -2.3282e-03  3.5770e-01  2.4891e+00\nDamban              -2.2109e-01 -2.0679e-03  2.6448e-01 -4.2587e-01\nDambatta             1.3602e-02 -2.0979e-07  3.2307e-05  2.3932e+00\nDamboa               2.4758e+00 -3.7806e-03  3.6109e-01  4.1264e+00\nDan Musa             8.1327e-01 -1.8205e-03  1.9936e-01  1.8255e+00\nDandi                1.2156e+00 -3.5381e-03  6.7955e-01  1.4790e+00\nDandume              3.2692e-02 -8.1304e-06  1.5671e-03  8.2604e-01\nDange-Shuni         -2.3479e-02 -3.0829e-05  3.3822e-03 -4.0320e-01\nDanja               -4.3605e-02 -2.2463e-04  2.8783e-02 -2.5570e-01\nDarazo               1.2068e-01 -6.0255e-04  6.6067e-02  4.7187e-01\nDass                 1.1043e+00 -2.3840e-03  9.1923e-01  1.1543e+00\nDaura                3.0409e-01 -4.5039e-03  1.1538e+00  2.8730e-01\nDawakin Kudu         2.4893e-01 -2.2513e-04  2.8847e-02  1.4670e+00\nDawakin Tofa         1.7719e+00 -2.6895e-03  3.4378e-01  3.0266e+00\nDegema               3.7781e-01 -3.4114e-04  3.2695e-02  2.0913e+00\nDekina               2.7151e+00 -3.1340e-03  6.0218e-01  3.5029e+00\nDemsa                1.8760e-01 -4.7433e-04  5.2015e-02  8.2465e-01\nDikwa                2.9224e+00 -3.7806e-03  4.8271e-01  4.2118e+00\nDoguwa              -1.4032e-01 -7.9288e-05  1.0161e-02 -1.3913e+00\nDoma                 1.2540e-01 -2.4937e-05  2.1223e-03  2.7225e+00\nDonga                8.3600e-02 -2.4683e-04  2.3659e-02  5.4512e-01\nDukku                1.4704e+00 -7.2721e-03  7.9204e-01  1.6604e+00\nDunukofia            6.2282e-03 -9.4458e-08  1.4546e-05  1.6330e+00\nDutse                1.6738e+00 -3.5108e-03  3.3541e-01  2.8961e+00\nDutsi               -2.4159e-02 -1.1656e-05  1.2788e-03 -6.7524e-01\nDutsin-Ma            4.3495e-01 -5.8457e-04  7.4877e-02  1.5916e+00\nEastern Obolo        2.3619e+00 -6.8973e-03  1.0548e+00  2.3064e+00\nEbonyi               8.2004e-01 -1.2261e-03  1.5694e-01  2.0731e+00\nEdati                2.0530e-02 -2.3699e-04  9.1573e-02  6.8628e-02\nEde North            1.1454e-01 -4.6900e-04  1.2063e-01  3.3114e-01\nEde South           -3.2733e-02 -2.4098e-04  2.0505e-02 -2.2691e-01\nEdu                  3.4765e-01 -6.7035e-04  1.0316e-01  1.0845e+00\nEfon                 1.7991e-01 -7.0007e-04  1.3484e-01  4.9184e-01\nEgbado North        -8.3952e-02 -2.0002e-05  3.0801e-03 -1.5123e+00\nEgbado South         3.8594e-01 -2.5738e-03  3.9534e-01  6.1790e-01\nEgbeda              -1.0412e-02 -1.3796e-06  2.1246e-04 -7.1421e-01\nEgbedore            -1.6606e-02 -9.1050e-05  8.7284e-03 -1.7677e-01\nEgor                 3.9639e-01 -7.7595e-04  1.9952e-01  8.8914e-01\nEhime-Mbano          2.8900e-01 -5.1603e-04  7.9427e-02  1.0273e+00\nEjigbo               7.9439e-02 -2.3903e-04  2.6218e-02  4.9208e-01\nEkeremor             3.5345e+00 -8.0504e-03  1.5392e+00  2.8554e+00\nEket                 6.0520e-01 -2.8749e-04  5.5398e-02  2.5725e+00\nEkiti                8.7026e-01 -1.7292e-03  2.2124e-01  1.8539e+00\nEkiti East          -1.0531e+00 -2.8987e-03  4.4510e-01 -1.5742e+00\nEkiti South West     2.4368e-01 -4.5627e-04  5.0035e-02  1.0914e+00\nEkiti West          -9.3995e-03 -1.4155e-06  1.3571e-04 -8.0675e-01\nEkwusigo             1.2454e+00 -2.2229e-03  3.4157e-01  2.1347e+00\nEleme                1.1059e+00 -3.7806e-03  4.8271e-01  1.5972e+00\nEmohua               5.0053e-02 -1.7066e-05  1.6361e-03  1.2379e+00\nEmure               -6.3036e-02 -1.9148e-04  2.9481e-02 -3.6601e-01\nEnugu East           5.1819e-01 -9.9617e-04  1.5326e-01  1.3262e+00\nEnugu North          1.4315e+00 -2.9504e-03  4.5301e-01  2.1312e+00\nEnugu South          1.1145e+00 -2.7490e-03  7.0546e-01  1.3301e+00\nEpe                 -1.1269e-01 -8.4068e-05  8.0591e-03 -1.2543e+00\nEsan Central         1.2582e+00 -2.1211e-03  4.0797e-01  1.9733e+00\nEsan North East      1.3634e+00 -1.5784e-03  2.4269e-01  2.7708e+00\nEsan South East      1.1864e+00 -3.7722e-03  3.1984e-01  2.1045e+00\nEsan West            8.4785e-01 -8.7662e-04  1.1225e-01  2.5332e+00\nEse-Odo              1.5782e+00 -2.2113e-03  3.3978e-01  2.7113e+00\nEsit - Eket          2.5211e+00 -4.8759e-03  6.2187e-01  3.2031e+00\nEssien Udim          2.1973e+00 -2.9391e-03  3.2151e-01  3.8804e+00\nEtche               -2.8299e-01 -4.0075e-04  4.3950e-02 -1.3479e+00\nEthiope East         6.6806e-01 -1.0477e-03  2.0173e-01  1.4897e+00\nEthiope West         1.4389e+00 -2.3655e-03  3.6342e-01  2.3907e+00\nEti-Osa              8.9627e-01 -3.7806e-03  5.8001e-01  1.1818e+00\nEtim Ekpo            2.4231e+00 -2.4851e-03  3.1771e-01  4.3032e+00\nEtinan               2.0980e+00 -5.0767e-03  7.7783e-01  2.3846e+00\nEtsako Central       1.3454e+00 -1.8038e-03  2.7727e-01  2.5586e+00\nEtsako East          9.4352e-01 -1.0719e-03  9.1134e-02  3.1290e+00\nEtsako West         -1.0750e-01 -1.7066e-05  1.8723e-03 -2.4840e+00\nEtung                9.9337e-02 -6.2842e-04  1.6161e-01  2.4866e-01\nEwekoro              4.2616e-01 -9.2533e-04  1.1848e-01  1.2408e+00\nEzeagu               5.4151e-01 -7.6996e-04  1.1848e-01  1.5754e+00\nEzinihitte          -2.8265e-02 -9.6525e-06  1.4865e-03 -7.3286e-01\nEzza North           4.9492e-01 -7.5359e-04  9.6511e-02  1.5955e+00\nEzza South           5.2553e-01 -8.1841e-04  1.2593e-01  1.4832e+00\nFagge                6.8403e-01 -2.5565e-03  3.9269e-01  1.0956e+00\nFakai               -5.2165e-01 -9.1216e-04  9.9983e-02 -1.6468e+00\nFaskari             -2.3135e-02 -4.8779e-04  4.6743e-02 -1.0475e-01\nFika                -5.4041e-02 -6.3818e-04  5.4280e-02 -2.2922e-01\nFufore               4.2035e-01 -3.7806e-03  4.8271e-01  6.1046e-01\nFunakaye             1.0009e+00 -1.5239e-03  2.3432e-01  2.0709e+00\nFune                 4.5668e-01 -2.3841e-04  2.2852e-02  3.0226e+00\nFuntua               6.3610e-02 -3.8805e-04  5.9736e-02  2.6185e-01\nGabasawa             1.4201e+00 -3.2477e-03  4.1489e-01  2.2098e+00\nGada                -6.9792e-03 -5.8822e-08  1.1338e-05 -2.0727e+00\nGagarawa             1.0974e+00 -2.3743e-03  3.0358e-01  1.9960e+00\nGamawa               4.0211e-02 -1.9272e-05  2.4700e-03  8.0947e-01\nGanjuwa              1.4234e-01 -1.4531e-03  1.3911e-01  3.8554e-01\nGanye                2.9061e-04 -1.1708e-09  2.2567e-07  6.1176e-01\nGarki                8.7491e-01 -7.2439e-04  6.9399e-02  3.3239e+00\nGarko                4.6262e-01 -1.6177e-03  1.7719e-01  1.1029e+00\nGarum Mallam         3.2157e-01 -2.5905e-04  3.9882e-02  1.6115e+00\nGashaka              7.7531e-03 -2.7609e-05  5.3215e-03  1.0666e-01\nGassol               5.5535e-03 -3.6500e-05  4.6778e-03  8.1732e-02\nGaya                 1.3202e+00 -3.4605e-03  6.6470e-01  1.6235e+00\nGbako               -6.5856e-02 -1.2708e-04  1.9568e-02 -4.6987e-01\nGboko                7.4971e-03 -5.6321e-06  8.6733e-04  2.5476e-01\nGeidam               2.1773e+00 -3.7806e-03  4.8271e-01  3.1393e+00\nGezawa               1.3411e-01 -3.0800e-05  4.7430e-03  1.9478e+00\nGiade                1.9790e-01 -1.6887e-04  3.2545e-02  1.0979e+00\nGirei                6.6862e-01 -1.4857e-03  2.2845e-01  1.4020e+00\nGiwa                 6.9331e-01 -9.3326e-04  7.9354e-02  2.4645e+00\nGokana              -2.7791e-01 -6.0255e-04  1.1607e-01 -8.1396e-01\nGombe                1.1514e+00 -1.1819e-03  4.5628e-01  1.7063e+00\nGombi                6.4225e-03 -9.4458e-08  1.2106e-05  1.8459e+00\nGoronyo             -8.9661e-02 -2.4136e-03  3.0859e-01 -1.5706e-01\nGubio                2.5590e+00 -3.7806e-03  5.8001e-01  3.3650e+00\nGudu                 9.2566e-01 -1.4027e-03  3.6044e-01  1.5442e+00\nGujba                1.6898e+00 -3.7806e-03  4.1321e-01  2.6346e+00\nGulani              -1.1828e-01 -6.0255e-04  6.6067e-02 -4.5783e-01\nGuma                 2.3373e-01 -7.9657e-04  6.7741e-02  9.0109e-01\nGumel               -9.9981e-02 -1.3367e-05  3.4398e-03 -1.7045e+00\nGummi               -3.4644e-02 -5.7083e-05  6.2623e-03 -4.3706e-01\nGurara              -7.5850e-02 -1.7488e-04  1.9183e-02 -5.4638e-01\nGuri                 1.3871e+00 -2.6994e-03  2.9535e-01  2.5572e+00\nGusau                2.2766e-02 -5.4695e-06  5.2437e-04  9.9443e-01\nGuyuk               -4.4355e-01 -6.0255e-04  1.1607e-01 -1.3002e+00\nGuzamala             2.9224e+00 -3.7806e-03  4.8271e-01  4.2118e+00\nGwadabawa            2.7569e-01 -2.3996e-04  3.0747e-02  1.5736e+00\nGwagwalada           1.4105e-01 -1.6593e-04  2.1262e-02  9.6844e-01\nGwale                5.4504e-01 -8.7446e-04  1.6840e-01  1.3303e+00\nGwandu               8.6620e-02 -3.7170e-04  7.1618e-02  3.2506e-01\nGwaram               7.2564e-01 -1.7333e-03  1.6589e-01  1.7859e+00\nGwarzo               6.6298e-01 -1.6901e-03  2.1624e-01  1.4293e+00\nGwer East            2.2706e-01 -1.9067e-03  1.6197e-01  5.6893e-01\nGwer West            2.0705e+00 -7.3959e-03  9.4089e-01  2.1421e+00\nGwiwa                9.9615e-02 -7.5240e-05  9.6424e-03  1.0152e+00\nGwoza                2.9224e+00 -3.7806e-03  7.2596e-01  3.4344e+00\nHadejia             -4.3259e-01 -1.9024e-04  4.8945e-02 -1.9545e+00\nHawul                1.2192e+00 -2.5738e-03  3.9534e-01  1.9431e+00\nHong                -3.6492e-01 -3.4114e-04  4.3707e-02 -1.7438e+00\nIbadan North         1.2396e-01 -1.6508e-03  2.5380e-01  2.4933e-01\nIbadan North East    3.4631e-03 -2.6842e-07  3.4402e-05  5.9048e-01\nIbadan North West    2.0159e-01 -1.4502e-04  2.2329e-02  1.3501e+00\nIbadan South East    1.5088e-01 -1.0764e-03  1.6559e-01  3.7343e-01\nIbadan South West    3.2844e-01 -4.5302e-04  8.7279e-02  1.1133e+00\nIbaji                1.2443e+00 -5.6483e-03  6.1618e-01  1.5923e+00\nIbarapa Central      3.5049e-02 -1.4874e-05  2.2905e-03  7.3264e-01\nIbarapa East         3.0672e-02 -5.9738e-06  7.6562e-04  1.1087e+00\nIbarapa North        7.4915e-02 -1.7066e-05  2.6280e-03  1.4617e+00\nIbeju/Lekki          9.2254e-02 -2.0815e-05  8.0447e-03  1.0288e+00\nIbeno                1.8099e+00 -1.7434e-03  2.6801e-01  3.4994e+00\nIbesikpo Asutan      1.2113e+00 -9.5603e-04  1.4709e-01  3.1608e+00\nIbi                 -2.8258e-02 -1.2378e-04  1.3579e-02 -2.4144e-01\nIbiono Ibom          1.1364e+00 -1.8579e-03  2.3767e-01  2.3349e+00\nIdah                 1.5650e+00 -1.8926e-03  4.8609e-01  2.2474e+00\nIdanre               6.4114e-01 -8.7086e-04  7.4054e-02  2.3592e+00\nIdeato North         3.0853e-01 -1.3620e-03  1.3040e-01  8.5815e-01\nIdeato South         7.3530e-02 -2.7555e-04  5.3097e-02  3.2030e-01\nIdemili North        8.2026e-01 -2.9663e-03  3.2447e-01  1.4452e+00\nIdemili South        1.4474e+00 -2.4203e-03  3.0944e-01  2.6063e+00\nIdo                  1.7084e-01 -1.7006e-04  1.6301e-02  1.3394e+00\nIdo-Osi             -5.8061e-01 -2.5738e-03  3.9534e-01 -9.1933e-01\nIfako-Ijaye          1.9044e-01 -6.2285e-05  9.5912e-03  1.9452e+00\nIfe Central          2.9143e-01 -1.7062e-03  3.2831e-01  5.1160e-01\nIfe East             3.9910e-01 -7.6198e-04  1.4676e-01  1.0438e+00\nIfe North            1.0598e-01 -1.9241e-04  2.1106e-02  7.3084e-01\nIfe South            1.9118e-01 -8.2449e-05  1.0566e-02  1.8607e+00\nIfedayo              1.4992e-01 -1.0420e-04  1.3354e-02  1.2982e+00\nIfedore              6.3786e-01 -1.7434e-03  1.9094e-01  1.4637e+00\nIfelodun (Kwara)     2.2674e-01 -3.2779e-04  2.2759e-02  1.5052e+00\nIfelodun (Osun)      2.8075e-01 -1.7893e-03  4.5962e-01  4.1676e-01\nIfo                  6.5832e-01 -1.6610e-03  1.4113e-01  1.7568e+00\nIgabi                8.3787e-01 -4.2721e-03  3.6204e-01  1.3996e+00\nIgalamela-Odolu      2.0751e-01 -1.0059e-03  8.5527e-02  7.1300e-01\nIgbo-Etiti           2.1596e-01 -2.1198e-04  3.2637e-02  1.1966e+00\nIgbo-Eze North       5.1596e-02 -2.4203e-03  3.7182e-01  8.8585e-02\nIgbo-Eze South       9.1189e-01 -2.1441e-03  4.1239e-01  1.4234e+00\nIgueben              2.2979e+00 -5.8014e-03  7.3923e-01  2.6794e+00\nIhiala               3.0684e-01 -5.4736e-04  6.0019e-02  1.2547e+00\nIhitte/Uboma         1.6995e-01 -3.9074e-04  6.0150e-02  6.9456e-01\nIjebu East          -8.2424e-01 -2.5387e-03  2.1552e-01 -1.7700e+00\nIjebu North         -4.4703e-02 -8.9545e-04  8.5772e-02 -1.4958e-01\nIjebu North East    -1.5286e-01 -2.8559e-04  5.5031e-02 -6.5040e-01\nIjebu Ode            9.9278e-02 -1.9656e-04  3.7879e-02  5.1110e-01\nIjero               -1.4662e-01 -4.1496e-04  6.3876e-02 -5.7849e-01\nIjumu                5.9617e-01 -6.0255e-04  5.7733e-02  2.4837e+00\nIka                  3.3029e+00 -6.8043e-03  1.3026e+00  2.8999e+00\nIka North East      -1.9006e+00 -3.7806e-03  5.8001e-01 -2.4906e+00\nIka South           -1.7291e-02 -4.1856e-03  8.0338e-01 -1.4621e-02\nIkara                4.3218e-01 -1.6109e-03  1.7645e-01  1.0327e+00\nIkeduru             -1.7452e-02 -1.7066e-05  2.6280e-03 -3.4009e-01\nIkeja                1.4716e+00 -2.8402e-03  2.7152e-01  2.8296e+00\nIkenne              -1.9854e-02 -6.3818e-04  1.2293e-01 -5.4806e-02\nIkere                3.0092e-01 -1.1767e-03  1.8100e-01  7.1008e-01\nIkole                2.1088e-02 -3.0960e-06  3.3967e-04  1.1444e+00\nIkom                 6.3636e-02 -1.4723e-04  1.8868e-02  4.6435e-01\nIkono                1.4030e+00 -1.5657e-03  1.7151e-01  3.3915e+00\nIkorodu              1.5552e-01 -2.6632e-04  4.1001e-02  7.6935e-01\nIkot Abasi           1.3769e+00 -1.3260e-03  2.0392e-01  3.0520e+00\nIkot Ekpene          2.2261e+00 -3.0987e-03  7.9491e-01  2.5003e+00\nIkpoba-Okha          8.6722e-01 -1.2233e-03  1.3404e-01  2.3720e+00\nIkwerre             -2.7449e-02 -2.6070e-03  5.0118e-01 -3.5091e-02\nIkwo                 2.1848e-01 -1.3000e-03  1.6640e-01  5.3878e-01\nIkwuano              9.9864e-02 -5.8702e-05  7.5231e-03  1.1520e+00\nIla                  4.7380e-02 -1.7284e-05  1.8962e-03  1.0884e+00\nIlaje                9.7571e-01 -7.5700e-04  1.4580e-01  2.5573e+00\nIle-Oluji-Okeigbo    9.7811e-01 -2.6175e-03  4.0204e-01  1.5467e+00\nIlejemeji            1.7445e-01 -1.0719e-03  2.0639e-01  3.8635e-01\nIlesha East          4.4893e-02 -2.8724e-05  5.5363e-03  6.0374e-01\nIlesha West          1.0962e-01 -3.3629e-04  6.4798e-02  4.3195e-01\nIllela               5.9819e-01 -1.3161e-03  3.3824e-01  1.0308e+00\nIlorin East         -3.3645e-02 -5.2293e-05  1.0079e-02 -3.3461e-01\nIlorin South         2.8594e-03 -8.6443e-07  1.6662e-04  2.2159e-01\nIlorin West          1.4699e-03 -6.8470e-06  1.0544e-03  4.5479e-02\nImeko-Afon          -3.2367e-02 -3.7806e-03  5.8001e-01 -3.7535e-02\nIngawa               5.8714e-01 -1.8695e-03  1.5881e-01  1.4780e+00\nIni                  6.6850e-01 -1.8706e-03  2.3929e-01  1.3704e+00\nIpokia              -1.8760e-02 -4.6157e-05  8.8962e-03 -1.9841e-01\nIrele                1.8468e+00 -2.6263e-03  5.0488e-01  2.6029e+00\nIrepo                6.4392e-03 -3.6910e-05  7.1140e-03  7.6782e-02\nIrepodun (Kwara)     5.4095e-01 -1.5815e-03  2.0237e-01  1.2060e+00\nIrepodun (Osun)      5.4222e-02 -6.4031e-05  1.6476e-02  4.2292e-01\nIrepodun/Ifelodun   -4.3832e-02 -2.4981e-04  2.3944e-02 -2.8165e-01\nIrewole              3.8483e-02 -2.5667e-04  3.9517e-02  1.9488e-01\nIsa                 -7.5904e-02 -1.0412e-03  1.3331e-01 -2.0504e-01\nIse/Orun            -6.9365e-01 -3.2003e-03  4.0885e-01 -1.0798e+00\nIseyin               3.9054e-01 -1.7646e-03  1.6888e-01  9.5461e-01\nIshielu              2.6421e-02 -5.0650e-06  5.5568e-04  1.1210e+00\nIsi-Uzo             -9.4144e-01 -4.3666e-03  3.7002e-01 -1.5405e+00\nIsiala-Ngwa North   -1.3470e-02 -2.4127e-06  3.7154e-04 -6.9867e-01\nIsiala-Ngwa South    4.2176e-01 -8.9545e-04  9.8153e-02  1.3491e+00\nIsiala Mbano         9.6890e-02 -2.3996e-04  3.0747e-02  5.5393e-01\nIsin                 1.7121e-02 -4.6162e-07  1.1879e-04  1.5709e+00\nIsiukwuato           1.4327e-02 -1.8316e-04  2.8201e-02  8.6404e-02\nIsokan               8.4270e-02 -4.9848e-05  7.6761e-03  9.6240e-01\nIsoko North          8.8863e-01 -1.9714e-03  3.7924e-01  1.4462e+00\nIsoko South          1.1174e+00 -1.2462e-03  1.9167e-01  2.5552e+00\nIsu                 -6.6828e-01 -2.2229e-03  4.2751e-01 -1.0187e+00\nItas/Gadau           3.0778e-01 -1.7839e-04  1.7099e-02  2.3551e+00\nItesiwaju            3.5248e-01 -1.9823e-03  3.8132e-01  5.7402e-01\nItu                  2.5145e+00 -4.5649e-03  8.7585e-01  2.6917e+00\nIvo                 -6.2184e-02 -2.4937e-05  3.1960e-03 -1.0995e+00\nIwajowa              1.3885e-01 -5.6324e-05  7.2184e-03  1.6349e+00\nIwo                  1.2012e-01 -2.6632e-04  4.1001e-02  5.9456e-01\nIzzi                 6.3985e-01 -2.1017e-03  3.2298e-01  1.1296e+00\nJaba                 2.5637e-01 -1.6690e-03  2.5660e-01  5.0940e-01\nJada                -2.5262e-01 -1.5022e-04  3.8650e-02 -1.2842e+00\nJahun                1.4901e+00 -1.3966e-03  1.7875e-01  3.5279e+00\nJakusko              8.5156e-01 -1.7491e-03  1.9156e-01  1.9496e+00\nJalingo             -3.6708e-02 -1.1732e-04  3.0186e-02 -2.1060e-01\nJama'are             1.6730e-01 -1.2010e-04  2.3147e-02  1.1004e+00\nJega                 2.9327e-01 -4.4348e-04  5.6814e-02  1.2323e+00\nJema'a               6.7164e-02 -9.0757e-04  1.1621e-01  1.9968e-01\nJere                 9.1207e-01 -3.8424e-04  7.4033e-02  3.3535e+00\nJibia                5.4587e-03 -1.2442e-05  1.9160e-03  1.2499e-01\nJos East             1.5916e-01 -2.5972e-04  3.3278e-02  8.7389e-01\nJos North            2.1351e-01 -6.6305e-04  1.2772e-01  5.9929e-01\nJos South           -1.6913e-01 -2.7975e-04  4.3068e-02 -8.1361e-01\nKabba/Bunu           7.2210e-01 -7.8863e-04  1.0099e-01  2.2747e+00\nKabo                 6.2384e-01 -8.5406e-04  9.3621e-02  2.0417e+00\nKachia               1.0632e-01 -3.0472e-05  3.3431e-03  1.8393e+00\nKaduna North         1.3377e+00 -1.7933e-03  4.6064e-01  1.9736e+00\nKaduna South        -3.0006e+00 -2.8461e-03  7.3030e-01 -3.5079e+00\nKafin Hausa          1.7764e+00 -3.6951e-03  4.7183e-01  2.5915e+00\nKafur                3.0119e-01 -7.0298e-04  9.0034e-02  1.0061e+00\nKaga                 2.4331e+00 -3.7806e-03  5.8001e-01  3.1998e+00\nKagarko              1.9815e-01 -3.3138e-03  3.6236e-01  3.3468e-01\nKaiama              -3.4618e-02 -4.9084e-05  6.2905e-03 -4.3585e-01\nKaita               -1.8713e-02 -1.8676e-05  2.3936e-03 -3.8210e-01\nKajola               2.0159e-01 -6.9222e-05  1.7812e-02  1.5110e+00\nKajuru               2.1734e-01 -3.0770e-03  2.6107e-01  4.3138e-01\nKala/Balge           2.9224e+00 -3.7806e-03  9.6920e-01  2.9724e+00\nKalgo                4.3332e-01 -3.0100e-03  4.6214e-01  6.4185e-01\nKaltungo            -2.8963e-01 -2.4343e-04  3.7479e-02 -1.4948e+00\nKanam                2.1431e-01 -2.8855e-04  3.1648e-02  1.2063e+00\nKankara              6.5569e-01 -8.3928e-04  9.2001e-02  2.1645e+00\nKanke                4.7581e-01 -7.4550e-04  1.1472e-01  1.4070e+00\nKankia               3.6796e-01 -2.8638e-04  3.1410e-02  2.0778e+00\nKano Municipal       5.2370e-01 -4.9188e-04  7.5711e-02  1.9051e+00\nKarasuwa             7.9218e-01 -6.7919e-04  1.0452e-01  2.4524e+00\nKaraye              -2.0653e-01 -1.3465e-04  2.0733e-02 -1.4334e+00\nKarim-Lamido        -8.3729e-02 -2.2463e-04  1.7180e-02 -6.3709e-01\nKaru                 2.3969e-02 -1.8137e-06  1.5436e-04  1.9294e+00\nKatagum              1.8329e-02 -3.6910e-05  4.0493e-03  2.8861e-01\nKatcha              -7.8280e-03 -2.6809e-06  4.1285e-04 -3.8513e-01\nKatsina              1.7105e-03 -7.9949e-06  2.0573e-03  3.7887e-02\nKatsina-Ala         -5.4433e-02 -1.4198e-05  1.5577e-03 -1.3788e+00\nKaugama              1.6265e+00 -2.6839e-03  2.5662e-01  3.2161e+00\nKaura               -1.6876e-01 -1.1052e-04  2.1301e-02 -1.1555e+00\nKaura Namoda         2.2994e-01 -7.3297e-04  1.4118e-01  6.1393e-01\nKauru               -9.7683e-02 -7.6958e-05  1.1851e-02 -8.9662e-01\nKazaure              1.8945e-01 -1.6813e-04  1.8443e-02  1.3962e+00\nKeana                5.8978e-01 -7.7835e-04  1.4991e-01  1.5253e+00\nKebbe                2.1571e-01 -2.7163e-04  3.4804e-02  1.1577e+00\nKeffi               -1.1899e-01 -6.6217e-04  2.5576e-01 -2.3398e-01\nKhana                2.2749e-01 -1.2463e-04  1.0606e-02  2.2102e+00\nKibiya               3.7888e-01 -8.0463e-04  1.5497e-01  9.6450e-01\nKirfi                9.6391e-02 -1.8684e-04  2.8768e-02  5.6941e-01\nKiri Kasamma         7.1549e-01 -7.2924e-04  9.3395e-02  2.3436e+00\nKiru                 3.0459e-01 -5.2114e-04  5.7146e-02  1.2763e+00\nKiyawa               1.0847e+00 -1.0764e-03  1.6559e-01  2.6683e+00\nKogi                 3.2346e-01 -1.7434e-03  2.6801e-01  6.2817e-01\nKoko/Besse           1.0138e+00 -2.8743e-03  3.6732e-01  1.6776e+00\nKokona               1.2271e-02 -1.1273e-04  1.0807e-02  1.1913e-01\nKolokuma/Opokuma    -2.1548e+00 -2.7967e-03  7.1766e-01 -2.5403e+00\nKonduga              2.5170e+00 -3.7806e-03  2.8812e-01  4.6963e+00\nKonshisha           -2.7488e-02 -4.0077e-04  4.3951e-02 -1.2921e-01\nKontagora            1.0053e-01 -1.9063e-05  4.9054e-03  1.4356e+00\nKosofe               1.1396e+00 -1.9085e-03  3.6717e-01  1.8839e+00\nKubau                5.5930e-01 -2.2911e-03  3.5201e-01  9.4656e-01\nKudan                5.2374e-02 -1.2759e-03  1.6332e-01  1.3275e-01\nKuje                 4.2328e-01 -7.5928e-04  1.1684e-01  1.2405e+00\nKukawa               2.9224e+00 -3.7806e-03  9.6920e-01  2.9724e+00\nKumbotso             7.3965e-01 -9.6858e-04  7.4023e-02  2.7221e+00\nKunchi               9.2231e-01 -1.8205e-03  3.5026e-01  1.5615e+00\nKura                 8.7866e-02 -2.5067e-05  4.8316e-03  1.2644e+00\nKurfi                5.8636e-02 -2.1977e-05  3.3843e-03  1.0083e+00\nKurmi                9.1290e-02 -1.1026e-04  1.6978e-02  7.0146e-01\nKusada               1.1216e+00 -3.1839e-03  6.1174e-01  1.4381e+00\nKwali                1.9088e-01 -8.2449e-05  2.1215e-02  1.3111e+00\nKwami                1.6069e+00 -2.5939e-03  3.3159e-01  2.7950e+00\nKwande               1.6280e-01 -2.4275e-03  3.1036e-01  2.9659e-01\nKware               -4.3812e-03 -2.4359e-06  2.3354e-04 -2.8653e-01\nKwaya Kusar          1.4770e-01 -1.7066e-05  3.2893e-03  2.5755e+00\nLafia               -1.6424e-02 -3.2507e-06  3.1165e-04 -9.3018e-01\nLagelu              -4.9007e-02 -7.5980e-05  8.3353e-03 -5.3595e-01\nLagos Island         4.0599e-01 -1.0674e-04  2.0573e-02  2.8313e+00\nLagos Mainland       1.4468e+00 -2.8402e-03  4.3614e-01  2.1950e+00\nLamurde             -1.6107e-01 -3.7806e-03  4.8271e-01 -2.2638e-01\nLangtang North       1.7745e-01 -3.5397e-04  3.8821e-02  9.0242e-01\nLangtang South      -1.7842e-01 -2.3090e-04  4.4495e-02 -8.4474e-01\nLapai               -2.6691e-01 -4.8910e-04  6.2654e-02 -1.0644e+00\nLau                 -2.0230e-01 -1.6422e-04  1.5742e-02 -1.6110e+00\nLavun               -5.3287e-02 -8.9040e-06  1.7162e-03 -1.2861e+00\nLere                -1.4457e-01 -4.5955e-05  7.0767e-03 -1.7181e+00\nLogo                 8.3530e-02 -9.8313e-05  1.5138e-02  6.7969e-01\nLokoja              -2.7102e-01 -1.7390e-04  1.3301e-02 -2.3485e+00\nMachina              8.5257e-01 -8.3715e-04  1.2881e-01  2.3778e+00\nMadagali             2.0137e+00 -3.7806e-03  7.2596e-01  2.3679e+00\nMadobi               8.1952e-01 -1.5111e-03  1.4465e-01  2.1587e+00\nMafa                 2.5906e+00 -3.7806e-03  4.8271e-01  3.7342e+00\nMagama               1.9288e-01 -2.0229e-04  2.5921e-02  1.1993e+00\nMagumeri             1.0097e+00 -5.4055e-04  5.9273e-02  4.1495e+00\nMai'adua             1.4475e-01 -2.1336e-04  3.2849e-02  7.9982e-01\nMaiduguri            1.7649e+00 -3.1710e-03  1.2217e+00  1.5996e+00\nMaigatari            4.8182e-01 -3.6009e-04  5.5434e-02  2.0480e+00\nMaiha               -4.9324e-02 -4.4102e-04  8.4968e-02 -1.6770e-01\nMaiyama              1.0366e+00 -9.8782e-04  1.2648e-01  2.9175e+00\nMakoda               1.1457e+00 -3.3919e-03  3.7088e-01  1.8869e+00\nMakurdi              2.4282e-01 -5.9509e-05  1.1469e-02  2.2679e+00\nMalam Madori         1.1070e+00 -2.5565e-03  3.9269e-01  1.7706e+00\nMalumfashi           8.6314e-01 -9.6203e-04  1.4801e-01  2.2461e+00\nMangu                9.2528e-02 -5.7452e-05  7.3628e-03  1.0790e+00\nMani                -4.0034e-02 -3.7865e-05  4.8527e-03 -5.7414e-01\nMaradun              1.5611e-01 -9.0406e-05  7.6936e-03  1.7808e+00\nMariga               3.4990e-01 -6.7626e-04  5.7517e-02  1.4618e+00\nMarkafi             -5.0561e-02 -3.4185e-03  6.5666e-01 -5.8176e-02\nMarte                2.9224e+00 -3.7806e-03  7.2596e-01  3.4344e+00\nMaru                -3.5280e-02 -1.2100e-04  1.0297e-02 -3.4649e-01\nMashegu              1.8892e-01 -2.4136e-03  2.3084e-01  3.9824e-01\nMashi                5.4684e-02 -4.7202e-04  9.0939e-02  1.8290e-01\nMatazu               4.3344e-01 -3.4943e-04  6.7328e-02  1.6718e+00\nMayo-Belwa           9.5773e-02 -3.4114e-04  2.9024e-02  5.6417e-01\nMbaitoli            -1.0080e-01 -4.3332e-04  3.6864e-02 -5.2273e-01\nMbo                  3.4947e+00 -5.4330e-03  1.0415e+00  3.4297e+00\nMichika             -1.0025e-01 -3.4114e-04  8.7757e-02 -3.3725e-01\nMiga                 2.1495e+00 -3.4573e-03  5.3057e-01  2.9557e+00\nMikang               1.0213e-01 -5.2445e-05  1.3495e-02  8.7964e-01\nMinjibir             1.6295e+00 -3.5780e-03  3.9115e-01  2.6111e+00\nMisau               -1.6672e-02 -1.3396e-04  2.0627e-02 -1.1515e-01\nMkpat Enin           2.3165e+00 -2.7277e-03  3.4864e-01  3.9278e+00\nMoba                 1.3289e-01 -1.2018e-04  1.5401e-02  1.0718e+00\nMobbar               2.9224e+00 -3.7806e-03  5.8001e-01  3.8423e+00\nMokwa                3.0287e-02 -4.1403e-05  2.2503e-03  6.3933e-01\nMonguno              2.9224e+00 -3.7806e-03  5.8001e-01  3.8423e+00\nMopa-Muro            1.5974e+00 -2.9767e-03  7.6371e-01  1.8313e+00\nMoro                 7.4012e-03 -5.8753e-06  5.0003e-04  3.3124e-01\nMubi North           9.7470e-01 -1.2228e-02  2.3281e+00  6.4682e-01\nMubi South           2.0261e+00 -1.2228e-02  3.1082e+00  1.1562e+00\nMusawa               7.2808e-01 -1.3118e-03  1.2560e-01  2.0581e+00\nMushin               1.2691e+00 -1.1973e-03  1.8415e-01  2.9603e+00\nMuya                 3.0340e-01 -2.1272e-04  4.0993e-02  1.4995e+00\nNafada               7.2516e-01 -9.2173e-04  1.7750e-01  1.7234e+00\nNangere              1.7099e-01 -2.2447e-04  2.8762e-02  1.0096e+00\nNasarawa-Eggon       6.3801e-04 -2.3557e-04  4.5395e-02  4.1001e-03\nNasarawa (Kano)     -5.7535e-01 -5.2104e-04  6.6744e-02 -2.2250e+00\nNasarawa (Nasarawa)  3.7952e-01 -2.8337e-04  2.7159e-02  2.3046e+00\nNdokwa East          4.0943e-01 -1.0114e-03  9.6869e-02  1.3187e+00\nNdokwa West          9.6522e-01 -1.5610e-03  1.7099e-01  2.3380e+00\nNembe                1.0017e+00 -2.1674e-03  3.3305e-01  1.7394e+00\nNgala                2.9224e+00 -3.7806e-03  9.6920e-01  2.9724e+00\nNganzai              2.3784e+00 -3.7806e-03  4.1321e-01  3.7059e+00\nNgaski               3.4305e-01 -4.9740e-04  6.3718e-02  1.3610e+00\nNgor-Okpala         -8.4875e-03 -9.6858e-04  9.2771e-02 -2.4686e-02\nNguru                1.2933e+00 -2.1504e-03  3.3045e-01  2.2535e+00\nNingi                4.7396e-01 -8.8161e-04  8.4447e-02  1.6340e+00\nNjaba               -2.0831e-01 -3.5386e-04  5.4475e-02 -8.9099e-01\nNjikoka             -9.1686e-02 -1.8521e-05  2.3737e-03 -1.8815e+00\nNkanu East           5.7491e-01 -3.3990e-03  2.8830e-01  1.0771e+00\nNkanu West          -5.7218e-01 -2.8641e-04  4.4094e-02 -2.7235e+00\nNkwerre             -8.4809e-02 -1.0477e-03  1.3414e-01 -2.2870e-01\nNnewi North          1.1623e+00 -9.3655e-04  2.4078e-01  2.3707e+00\nNnewi South          1.2399e+00 -2.6070e-03  2.4929e-01  2.4885e+00\nNsit Atai            2.6987e+00 -4.9132e-03  9.4236e-01  2.7850e+00\nNsit Ibom            1.0011e+00 -8.8889e-04  1.7118e-01  2.4218e+00\nNsit Ubium           1.3174e+00 -1.3161e-03  1.2602e-01  3.7149e+00\nNsukka               2.8271e-01 -9.4621e-04  1.2116e-01  8.1492e-01\nNuman                6.5904e-01 -3.7806e-03  7.2596e-01  7.7793e-01\nNwangele            -1.6106e-01 -1.8475e-03  2.8399e-01 -2.9876e-01\nObafemi-Owode        2.1310e-01 -5.0089e-04  4.7998e-02  9.7495e-01\nObanliku             1.2691e-02 -8.3030e-07  2.1366e-04  8.6826e-01\nObi (Benue)         -4.4264e-02 -1.3765e-04  2.6528e-02 -2.7092e-01\nObi (Nasarawa)       5.3645e-01 -4.0517e-03  7.7780e-01  6.1286e-01\nObi Ngwa             1.4861e+00 -2.4910e-03  2.1147e-01  3.2371e+00\nObia/Akpor           2.0138e-02 -8.4481e-07  9.2686e-05  2.0919e+00\nObokun               8.0879e-02 -1.0132e-04  8.6226e-03  8.7208e-01\nObot Akara           1.9004e+00 -3.7722e-03  4.1230e-01  2.9655e+00\nObowo                7.7800e-03 -1.3618e-05  2.0970e-03  1.7019e-01\nObubra              -2.5637e-01 -5.4939e-04  6.0242e-02 -1.0423e+00\nObudu                2.8936e-02 -2.2546e-05  2.8896e-03  5.3872e-01\nOdeda                3.5817e-02 -2.6484e-05  2.9055e-03  6.6496e-01\nOdigbo               1.2245e+00 -5.1216e-03  5.5902e-01  1.6446e+00\nOdo-Otin             7.5086e-02 -2.8116e-05  3.0846e-03  1.3524e+00\nOdogbolu            -4.6639e-02 -1.5190e-04  1.4561e-02 -3.8524e-01\nOdukpani             7.4529e-01 -1.0416e-03  7.2269e-02  2.7762e+00\nOffa                 8.9283e-01 -1.2624e-03  9.7585e-01  9.0509e-01\nOfu                  1.9504e+00 -3.0153e-03  3.2982e-01  3.4015e+00\nOgba/Egbema/Ndoni   -2.3160e-01 -7.9431e-04  6.7549e-02 -8.8804e-01\nOgbadibo             7.1176e-02 -1.1533e-04  1.7758e-02  5.3499e-01\nOgbaru               2.3169e-01 -2.7555e-04  2.1073e-02  1.5979e+00\nOgbia                2.7158e-01 -4.0987e-04  6.3093e-02  1.0828e+00\nOgbomosho North     -4.1042e-02 -1.7710e-04  4.5566e-02 -1.9144e-01\nOgbomosho South     -7.6566e-02 -6.0255e-04  1.1607e-01 -2.2297e-01\nOgo Oluwa           -9.5208e-03 -9.4972e-05  1.4624e-02 -7.7945e-02\nOgoja               -1.7459e-02 -2.9070e-05  4.4766e-03 -2.6051e-01\nOgori/Magongo        5.4526e-01 -7.9139e-04  3.0563e-01  9.8772e-01\nOgu/Bolo             8.7787e-01 -3.7806e-03  5.8001e-01  1.1577e+00\nOgun waterside       1.0842e-01 -3.5343e-05  5.4425e-03  1.4702e+00\nOguta               -6.2751e-01 -1.8315e-03  1.7527e-01 -1.4945e+00\nOhafia               3.5409e-02 -6.0255e-04  1.1607e-01  1.0570e-01\nOhaji/Egbema         7.6374e-02 -1.4852e-04  1.6291e-02  5.9952e-01\nOhaozara             2.2662e-01 -2.9112e-04  3.7300e-02  1.1749e+00\nOhaukwu              3.2124e-01 -4.4102e-04  8.4968e-02  1.1035e+00\nOhimini              1.3730e+00 -1.5293e-03  2.9432e-01  2.5337e+00\nOji-River            5.2037e-02 -6.8733e-06  6.5896e-04  2.0274e+00\nOjo                 -6.2067e-03 -3.2483e-06  6.2610e-04 -2.4792e-01\nOju                  4.1864e-01 -1.8129e-03  1.9854e-01  9.4361e-01\nOke-Ero              7.6098e-01 -1.5940e-03  1.7460e-01  1.8250e+00\nOkehi                9.9924e-01 -4.1057e-03  6.2968e-01  1.2644e+00\nOkene                5.7894e-01 -5.2104e-04  8.0197e-02  2.0462e+00\nOkigwe              -1.8510e-01 -1.5394e-03  1.4736e-01 -4.7818e-01\nOkitipupa            1.8891e+00 -3.6129e-03  5.5437e-01  2.5421e+00\nOkobo                1.9879e+00 -2.5125e-03  2.7496e-01  3.7958e+00\nOkpe                 1.2993e-01 -2.2023e-05  2.4162e-03  2.6438e+00\nOkpokwu              6.8966e-01 -8.3645e-04  1.0711e-01  2.1098e+00\nOkrika               1.7856e+00 -2.2229e-03  3.4157e-01  3.0590e+00\nOla-oluwa            3.4991e-01 -2.0440e-03  3.9317e-01  5.6130e-01\nOlamabolo            1.0384e+00 -2.5736e-03  2.8163e-01  1.9615e+00\nOlorunda             1.5371e-02 -1.5774e-06  1.5123e-04  1.2500e+00\nOlorunsogo           4.3710e-02 -5.7869e-05  6.3486e-03  5.4931e-01\nOluyole              5.4879e-02 -4.8215e-04  4.6203e-02  2.5755e-01\nOmala                3.1409e+00 -7.6262e-03  9.6996e-01  3.1969e+00\nOmumma              -7.2924e-02 -4.0767e-04  7.8545e-02 -2.5875e-01\nOna-Ara             -6.5377e-02 -6.7893e-04  8.6955e-02 -2.1940e-01\nOndo East            1.3603e+00 -2.4405e-03  3.7491e-01  2.2256e+00\nOndo West            9.7592e-01 -2.5736e-03  2.8163e-01  1.8438e+00\nOnicha               3.3276e-01 -5.1053e-04  4.8921e-02  1.5068e+00\nOnitsha North        5.4527e-01 -2.3282e-03  2.5483e-01  1.0848e+00\nOnitsha South        3.0910e-01 -1.0764e-03  2.7670e-01  5.8966e-01\nOnna                 1.4310e+00 -1.3570e-03  1.7368e-01  3.4369e+00\nOpobo/Nkoro          5.8335e-01 -2.7975e-04  5.3906e-02  2.5137e+00\nOredo                2.3950e-01 -1.7756e-04  4.5683e-02  1.1214e+00\nOrelope             -4.4118e-02 -4.8846e-05  7.5217e-03 -5.0813e-01\nOrhionmwon           1.0255e+00 -1.7955e-03  1.1396e-01  3.0432e+00\nOri Ire             -1.7823e-02 -1.2144e-03  1.1629e-01 -4.8703e-02\nOriade               8.8824e-02 -2.4487e-05  1.8732e-03  2.0529e+00\nOrlu                 4.6582e-02 -2.0314e-04  2.6030e-02  2.8998e-01\nOrolu                1.4695e-01 -1.1961e-03  2.3026e-01  3.0872e-01\nOron                 3.0391e-01 -5.3877e-05  8.2965e-03  3.3371e+00\nOrsu                 2.8786e-02 -1.5959e-06  2.4576e-04  1.8363e+00\nOru East             5.2517e-02 -4.7433e-04  5.2015e-02  2.3235e-01\nOru West             1.4533e-02 -5.6245e-04  1.4465e-01  3.9689e-02\nOruk Anam            2.6154e+00 -6.6287e-03  7.2243e-01  3.0848e+00\nOrumba North         3.5668e-01 -6.2439e-04  9.6094e-02  1.1526e+00\nOrumba South         3.7387e-02 -1.7066e-05  2.1872e-03  7.9979e-01\nOse                  1.5724e+00 -3.6129e-03  3.9495e-01  2.5078e+00\nOshimili North      -6.2328e-01 -1.2543e-03  1.9292e-01 -1.4162e+00\nOshimili South      -4.0724e-01 -8.0018e-04  8.7719e-02 -1.3723e+00\nOshodi-Isolo         1.7324e+00 -3.7806e-03  5.8001e-01  2.2797e+00\nOsisioma Ngwa        1.1779e-02 -1.1731e-06  1.1247e-04  1.1108e+00\nOsogbo              -2.8282e-03 -2.0603e-05  2.2603e-03 -5.9055e-02\nOturkpo              9.0551e-01 -1.0806e-03  1.0349e-01  2.8181e+00\nOvia North East      1.9081e-01 -4.7962e-05  3.6688e-03  3.1510e+00\nOvia South West      2.7760e-01 -6.0638e-05  7.7712e-03  3.1497e+00\nOwan East            5.0508e-01 -3.1396e-04  4.8333e-02  2.2988e+00\nOwan West            1.4293e+00 -5.1086e-03  7.8269e-01  1.6213e+00\nOwerri-Municipal    -1.8216e-01 -2.5387e-03  9.7873e-01 -1.8156e-01\nOwerri North        -1.9556e-01 -2.0809e-04  2.6664e-02 -1.1964e+00\nOwerri West          3.7430e-02 -2.5718e-05  3.2961e-03  6.5241e-01\nOwo                  2.7405e-01 -6.7459e-04  7.3961e-02  1.0102e+00\nOye                  3.8013e-02 -6.6351e-04  1.0211e-01  1.2103e-01\nOyi                 -4.0072e-02 -4.6419e-06  7.1484e-04 -1.4986e+00\nOyigbo              -7.2427e-01 -1.7010e-03  1.6281e-01 -1.7908e+00\nOyo East             3.7042e-02 -7.9949e-06  6.8043e-04  1.4203e+00\nOyo West             2.6311e-01 -8.5406e-04  9.3621e-02  8.6270e-01\nOyun                 4.1118e-01 -1.0568e-03  1.1582e-01  1.2113e+00\nPaikoro              2.1348e-02 -1.8398e-04  1.5655e-02  1.7209e-01\nPankshin             2.3985e-01 -3.3320e-04  3.6544e-02  1.2564e+00\nPatani               2.2923e+00 -6.2878e-03  9.6222e-01  2.3433e+00\nPategi               1.7657e-01 -7.3814e-05  9.4597e-03  1.8162e+00\nPort-Harcourt        1.0400e+00 -1.7670e-03  3.3999e-01  1.7866e+00\nPotiskum             6.7649e-01 -2.2229e-03  5.7076e-01  8.9838e-01\nQua'an Pan           4.7036e-02 -5.0745e-05  6.5034e-03  5.8389e-01\nRabah                1.5268e-01 -2.2878e-03  2.5042e-01  3.0967e-01\nRafi                -1.6613e-01 -6.4669e-05  9.9582e-03 -1.6641e+00\nRano                 3.1858e-01 -4.8011e-04  7.3900e-02  1.1737e+00\nRemo North          -1.0303e-01 -1.6422e-04  2.5286e-02 -6.4686e-01\nRijau                3.2747e-01 -6.3085e-04  6.9168e-02  1.2476e+00\nRimi                -3.9890e-02 -4.3346e-05  6.6749e-03 -4.8772e-01\nRimin Gado           1.6638e+00 -3.1702e-03  4.8665e-01  2.3896e+00\nRingim               1.8082e+00 -3.0816e-03  3.9374e-01  2.8866e+00\nRiyom               -1.8318e-03 -1.4090e-05  1.5459e-03 -4.6232e-02\nRogo                -4.3026e-02 -2.0701e-05  2.2711e-03 -9.0240e-01\nRoni                 4.7079e-02 -3.3739e-06  5.1958e-04  2.0655e+00\nSabon-Gari           2.6993e-01 -2.3784e-04  4.5832e-02  1.2620e+00\nSabon Birni          2.0557e-01 -2.3050e-03  5.9179e-01  2.7022e-01\nSabuwa               9.5972e-01 -4.9794e-03  9.5499e-01  9.8717e-01\nSafana               5.0945e-01 -1.4421e-03  1.8456e-01  1.1892e+00\nSagbama              1.4754e+00 -2.7353e-03  2.3216e-01  3.0678e+00\nSakaba               2.3414e-01 -4.1590e-04  8.0130e-02  8.2861e-01\nSaki East           -2.4263e-03 -2.7461e-06  4.2290e-04 -1.1785e-01\nSaki West           -7.7427e-03 -2.0418e-05  5.2540e-03 -1.0654e-01\nSandamu              6.4530e-03 -4.0870e-05  5.2379e-03  8.9728e-02\nSanga                2.0985e-02 -4.9784e-04  4.7705e-02  9.8360e-02\nSapele               1.1394e+00 -1.5121e-03  2.9102e-01  2.1148e+00\nSardauna             2.1234e-01 -1.2160e-03  4.6940e-01  3.1170e-01\nShagamu             -3.6075e-01 -6.7378e-04  8.6297e-02 -1.2257e+00\nShagari             -1.7577e-01 -7.2984e-05  1.1239e-02 -1.6573e+00\nShanga               5.0087e-01 -3.6559e-03  3.4922e-01  8.5376e-01\nShani               -8.0086e-02 -3.7806e-03  3.6109e-01 -1.2698e-01\nShanono              3.2742e-01 -1.9059e-04  2.9345e-02  1.9124e+00\nShelleng            -3.3179e-01 -2.2463e-04  2.4639e-02 -2.1123e+00\nShendam              6.7973e-02 -3.1209e-04  3.4229e-02  3.6909e-01\nShinkafi             2.1528e-01 -3.5134e-04  9.0379e-02  7.1725e-01\nShira                3.3709e-01 -3.8100e-04  5.8651e-02  1.3935e+00\nShiroro             -4.5533e-01 -4.8496e-04  5.3181e-02 -1.9724e+00\nShomgom              7.3789e-02 -2.3385e-04  3.6004e-02  3.9011e-01\nShomolu              8.7943e-01 -6.0591e-04  1.1672e-01  2.5759e+00\nSilame              -4.5347e-01 -3.4114e-04  6.5732e-02 -1.7674e+00\nSoba                -2.7459e-02 -1.8839e-05  1.8061e-03 -6.4567e-01\nSokoto North         7.4142e-02 -2.1017e-03  5.3970e-01  1.0378e-01\nSokoto South         1.0200e-01 -7.3297e-04  1.4118e-01  2.7341e-01\nSong                 2.9901e-01 -3.4114e-04  3.7415e-02  1.5476e+00\nSouthern Ijaw        2.0095e+00 -5.1447e-03  5.6153e-01  2.6885e+00\nSule-Tankarkar       5.9397e-01 -1.4766e-03  1.8897e-01  1.3698e+00\nSuleja               1.8844e-02 -1.2378e-04  2.3856e-02  1.2280e-01\nSumaila              2.6301e-01 -2.8096e-04  5.4139e-02  1.1316e+00\nSuru                 2.0004e+00 -5.3728e-03  8.2296e-01  2.2110e+00\nSurulere (Lagos)     1.5956e+00 -1.9858e-03  2.5400e-01  3.1698e+00\nSurulere (Oyo)       3.7858e-02 -4.9599e-04  3.4431e-02  2.0670e-01\nTafa                -5.4304e-01 -1.5983e-03  2.4574e-01 -1.0922e+00\nTafawa-Balewa        5.7329e-01 -1.1060e-03  8.4516e-02  1.9758e+00\nTai                 -1.0574e+00 -2.8329e-03  4.3502e-01 -1.5989e+00\nTakai                6.4339e-01 -6.3202e-04  8.0952e-02  2.2635e+00\nTakum                2.6273e-01 -3.5386e-04  6.8183e-02  1.0075e+00\nTalata Mafara       -3.3581e-02 -4.0130e-06  7.7350e-04 -1.2073e+00\nTambuwal             3.7224e-01 -1.1054e-03  9.3972e-02  1.2179e+00\nTangaza              9.8430e-01 -2.3760e-03  3.0379e-01  1.7901e+00\nTarauni              7.2159e-01 -2.1232e-03  4.0837e-01  1.1325e+00\nTarka               -3.5015e-01 -4.9777e-04  9.5897e-02 -1.1291e+00\nTarmua               1.0343e+00 -1.4129e-03  2.1728e-01  2.2220e+00\nTaura                1.5226e+00 -1.7926e-03  2.2934e-01  3.1831e+00\nTofa                 2.0196e+00 -3.5924e-03  5.5124e-01  2.7250e+00\nToro                 4.3018e-01 -6.3818e-04  4.8788e-02  1.9505e+00\nToto                 1.1996e-01 -2.2023e-05  2.8226e-03  2.2584e+00\nToungo               3.7966e-02 -7.3297e-04  1.8848e-01  8.9140e-02\nTsafe                2.7545e-01 -5.4952e-04  1.0586e-01  8.4828e-01\nTsanyawa             3.3996e-01 -2.2088e-04  2.4228e-02  2.1855e+00\nTudun Wada          -2.7802e-01 -1.9200e-04  1.6337e-02 -2.1736e+00\nTureta              -3.1303e-01 -1.6666e-03  1.8254e-01 -7.2877e-01\nUdenu                4.1021e-01 -2.8800e-03  4.4224e-01  6.2117e-01\nUdi                  8.8884e-01 -2.0340e-03  1.7276e-01  2.1434e+00\nUdu                  4.4453e-02 -1.1731e-06  2.2612e-04  2.9563e+00\nUdung Uko            2.6557e+00 -5.2336e-03  1.3397e+00  2.2989e+00\nUghelli North       -1.0352e-01 -9.2957e-06  7.1109e-04 -3.8818e+00\nUghelli South        1.1814e+00 -1.2160e-03  1.3325e-01  3.2398e+00\nUgwunagbo            8.5741e-01 -1.3161e-03  1.6846e-01  2.0922e+00\nUhunmwonde           5.0498e-01 -2.2463e-04  2.8783e-02  2.9778e+00\nUkanafun             1.8574e+00 -6.0538e-03  9.2662e-01  1.9358e+00\nUkum                 9.3750e-02 -3.2446e-04  6.2518e-02  3.7624e-01\nUkwa East            1.6680e+00 -2.8329e-03  3.0992e-01  3.0014e+00\nUkwa West            1.8187e-01 -8.2425e-04  1.0555e-01  5.6234e-01\nUkwuani              1.3492e+00 -3.9419e-03  7.5679e-01  1.5555e+00\nUmu-Nneochi          5.4195e-02 -1.1340e-04  1.2440e-02  4.8693e-01\nUmuahia North       -1.0998e-01 -4.8215e-04  5.2872e-02 -4.7621e-01\nUmuahia South        1.7559e-02 -4.9084e-05  7.5585e-03  2.0253e-01\nUngogo               1.0463e+00 -2.1784e-03  1.8500e-01  2.4376e+00\nUnuimo              -4.5294e-02 -1.7066e-05  1.8723e-03 -1.0464e+00\nUruan                3.0208e+00 -6.7081e-03  8.5397e-01  3.2761e+00\nUrue-Offong/Oruko    2.5955e+00 -3.7722e-03  5.7873e-01  3.4168e+00\nUshongo              4.3200e-02 -1.4760e-04  1.8914e-02  3.1519e-01\nUssa                 1.2831e-01 -1.2233e-04  3.1477e-02  7.2391e-01\nUvwie                6.4412e-01 -4.0517e-03  6.2143e-01  8.2223e-01\nUyo                  1.4351e+00 -1.2462e-03  9.5210e-02  4.6549e+00\nUzo-Uwani           -1.0008e-01 -2.9816e-03  2.8500e-01 -1.8188e-01\nVandeikya           -6.2177e-02 -5.1893e-05  7.9911e-03 -6.9497e-01\nWamako               1.2847e-01 -3.7003e-04  3.1481e-02  7.2613e-01\nWamba               -7.7795e-03 -1.6226e-04  2.4984e-02 -4.8191e-02\nWarawa               2.3014e-01 -2.4523e-04  2.6898e-02  1.4047e+00\nWarji                1.1669e+00 -1.5672e-03  3.0159e-01  2.1277e+00\nWarri North          1.9697e+00 -4.9606e-03  4.2010e-01  3.0466e+00\nWarri South          9.5011e-01 -7.7595e-04  9.9372e-02  3.0165e+00\nWarri South West     1.9478e+00 -7.3959e-03  1.1305e+00  1.8388e+00\nWasagu/Danko        -4.2015e-03 -1.1609e-05  1.2736e-03 -1.1741e-01\nWase                 3.4048e-02 -1.7301e-04  2.6639e-02  2.0967e-01\nWudil                3.6275e-01 -2.9843e-04  3.2732e-02  2.0067e+00\nWukari               4.4434e-02 -2.5748e-05  2.8247e-03  8.3652e-01\nWurno                9.4812e-03 -7.1496e-06  1.3781e-03  2.5560e-01\nWushishi             2.3262e-02 -4.6019e-04  5.0466e-02  1.0560e-01\nYabo                 3.6406e-01 -2.0731e-03  2.6514e-01  7.1105e-01\nYagba East           7.7466e-01 -3.7212e-03  4.0675e-01  1.2205e+00\nYagba West           1.1151e+00 -2.6314e-03  2.8793e-01  2.0831e+00\nYakurr               7.2229e-03 -1.3206e-05  2.0337e-03  1.6046e-01\nYala                 5.4110e-02 -3.1965e-05  3.0645e-03  9.7803e-01\nYamaltu/Deba         1.0680e-01 -6.7260e-04  7.3743e-02  3.9575e-01\nYankwashi            1.9928e-01 -1.1613e-03  1.7863e-01  4.7426e-01\nYauri                7.4558e-01 -9.7125e-04  2.4969e-01  1.4940e+00\nYenegoa              7.5471e-03 -1.1632e-03  1.4891e-01  2.2572e-02\nYola North           1.1875e-01 -1.7333e-03  6.6876e-01  1.4733e-01\nYola South          -8.7648e-01 -9.7125e-04  1.4943e-01 -2.2649e+00\nYorro                3.9072e-02 -3.6552e-04  4.6829e-02  1.8224e-01\nYunusari             2.2996e+00 -3.7806e-03  7.2596e-01  2.7034e+00\nYusufari             1.2197e+00 -1.6812e-03  2.5847e-01  2.4024e+00\nZaki                 1.0844e+00 -1.6269e-03  1.7820e-01  2.5728e+00\nZango                4.2527e-02 -7.6821e-04  1.4796e-01  1.1256e-01\nZango-Kataf         -1.5831e-01 -2.9125e-03  3.7219e-01 -2.5473e-01\nZaria                4.4623e-01 -3.9848e-04  7.6776e-02  1.6119e+00\nZing                 5.1245e-02 -1.2442e-05  4.8088e-03  7.3916e-01\nZurmi                4.2946e-02 -7.8244e-06  7.5014e-04  1.5683e+00\nZuru                 1.7657e-02 -2.3834e-05  4.5938e-03  2.6086e-01\n                    Pr.z....E.Ii..\nAba North                   0.1314\nAba South                   0.2814\nAbadam                      0.0030\nAbaji                       0.5198\nAbak                        0.0012\nAbakaliki                   0.1010\nAbeokuta North              0.2102\nAbeokuta South              0.5440\nAbi                         0.7037\nAboh-Mbaise                 0.8625\nAbua/Odual                  0.9952\nAbuja Municipal             0.7251\nAdavi                       0.0746\nAdo                         0.8812\nAdo-Odo/Ota                 0.3313\nAdo Ekiti                   0.8217\nAfijio                      0.5750\nAfikpo North                0.9284\nAfikpo South                0.8320\nAgaie                       0.8343\nAgatu                       0.0028\nAgege                       0.1762\nAguata                      0.0692\nAgwara                      0.1987\nAhiazu-Mbaise               0.5213\nAhoada East                 0.1733\nAhoada West                 0.5267\nAiyedade                    0.9629\nAiyedire                    0.5171\nAiyekire (Gbonyin)          0.5851\nAjaokuta                    0.0511\nAjeromi-Ifelodun            0.0322\nAjingi                      0.0027\nAkamkpa                     0.1385\nAkinyele                    0.3177\nAkko                        0.0360\nAkoko-Edo                   0.0021\nAkoko North East            0.0818\nAkoko North West            0.9881\nAkoko South East            0.0375\nAkoko South West            0.0498\nAkpabuyo                    0.2631\nAkuku Toru                  0.7010\nAkure North                 0.6759\nAkure South                 0.0812\nAkwanga                     0.3965\nAlbasu                      0.0124\nAleiro                      0.6252\nAlimosho                    0.0481\nAlkaleri                    0.7522\nAmuwo-Odofin                0.0030\nAnambra East                0.3759\nAnambra West                0.6748\nAnaocha                     0.0141\nAndoni                      0.5911\nAninri                      0.2615\nAniocha North               0.4270\nAniocha South               0.2041\nAnka                        0.7268\nAnkpa                       0.0001\nApa                         0.0000\nApapa                       0.0068\nArdo-Kola                   0.8659\nArewa-Dandi                 0.0231\nArgungu                     0.7075\nArochukwu                   0.1129\nAsa                         0.7092\nAsari-Toru                  0.6551\nAskira/Uba                  0.0901\nAtakumosa East              0.3119\nAtakumosa West              0.3040\nAtiba                       0.3682\nAtigbo                      0.1956\nAugie                       0.1531\nAuyo                        0.0036\nAwe                         0.3891\nAwgu                        0.0664\nAwka North                  0.7218\nAwka South                  0.1575\nAyamelum                    0.0315\nBabura                      0.3573\nBadagry                     0.7555\nBade                        0.0373\nBagudo                      0.0050\nBagwai                      0.0132\nBakassi                        NaN\nBakori                      0.1953\nBakura                      0.7368\nBalanga                     0.5430\nBali                        0.7504\nBama                        0.0006\nBarikin Ladi                0.9375\nBaruten                     0.8493\nBassa (Kogi)                0.0041\nBassa (Plateau)             0.3228\nBatagarawa                  0.7280\nBatsari                     0.5877\nBauchi                      0.2392\nBaure                       0.0665\nBayo                        0.3393\nBebeji                      0.2828\nBekwara                     0.6768\nBende                       0.5804\nBiase                       0.3620\nBichi                       0.0057\nBida                        0.7291\nBilliri                     0.7355\nBindawa                     0.1623\nBinji                       0.2391\nBiriniwa                    0.0034\nBirni Kudu                  0.0054\nBirnin-Gwari                0.0348\nBirnin Kebbi                0.1582\nBirnin Magaji               0.1703\nBiu                         0.0352\nBodinga                     0.2005\nBogoro                      0.2122\nBoki                        0.6406\nBokkos                      0.8477\nBoluwaduro                  0.5895\nBomadi                      0.0008\nBonny                       0.6319\nBorgu                       0.1547\nBoripe                      0.4246\nBosso                       0.5198\nBrass                       0.0196\nBuji                        0.1083\nBukkuyum                    0.9464\nBungudu                     0.2664\nBunkure                     0.1287\nBunza                       0.0061\nBursari                     0.0020\nBuruku                      0.7618\nBurutu                      0.0001\nBwari                       0.4810\nCalabar-Municipal           0.0691\nCalabar South               0.3859\nChanchaga                   0.5060\nCharanchi                   0.4826\nChibok                      0.0152\nChikun                      0.3023\nDala                        0.0381\nDamaturu                    0.0128\nDamban                      0.6702\nDambatta                    0.0167\nDamboa                      0.0000\nDan Musa                    0.0679\nDandi                       0.1391\nDandume                     0.4088\nDange-Shuni                 0.6868\nDanja                       0.7982\nDarazo                      0.6370\nDass                        0.2484\nDaura                       0.7739\nDawakin Kudu                0.1424\nDawakin Tofa                0.0025\nDegema                      0.0365\nDekina                      0.0005\nDemsa                       0.4096\nDikwa                       0.0000\nDoguwa                      0.1641\nDoma                        0.0065\nDonga                       0.5857\nDukku                       0.0968\nDunukofia                   0.1025\nDutse                       0.0038\nDutsi                       0.4995\nDutsin-Ma                   0.1115\nEastern Obolo               0.0211\nEbonyi                      0.0382\nEdati                       0.9453\nEde North                   0.7405\nEde South                   0.8205\nEdu                         0.2782\nEfon                        0.6228\nEgbado North                0.1305\nEgbado South                0.5366\nEgbeda                      0.4751\nEgbedore                    0.8597\nEgor                        0.3739\nEhime-Mbano                 0.3043\nEjigbo                      0.6227\nEkeremor                    0.0043\nEket                        0.0101\nEkiti                       0.0638\nEkiti East                  0.1154\nEkiti South West            0.2751\nEkiti West                  0.4198\nEkwusigo                    0.0328\nEleme                       0.1102\nEmohua                      0.2158\nEmure                       0.7144\nEnugu East                  0.1848\nEnugu North                 0.0331\nEnugu South                 0.1835\nEpe                         0.2097\nEsan Central                0.0485\nEsan North East             0.0056\nEsan South East             0.0353\nEsan West                   0.0113\nEse-Odo                     0.0067\nEsit - Eket                 0.0014\nEssien Udim                 0.0001\nEtche                       0.1777\nEthiope East                0.1363\nEthiope West                0.0168\nEti-Osa                     0.2373\nEtim Ekpo                   0.0000\nEtinan                      0.0171\nEtsako Central              0.0105\nEtsako East                 0.0018\nEtsako West                 0.0130\nEtung                       0.8036\nEwekoro                     0.2147\nEzeagu                      0.1152\nEzinihitte                  0.4636\nEzza North                  0.1106\nEzza South                  0.1380\nFagge                       0.2732\nFakai                       0.0996\nFaskari                     0.9166\nFika                        0.8187\nFufore                      0.5416\nFunakaye                    0.0384\nFune                        0.0025\nFuntua                      0.7934\nGabasawa                    0.0271\nGada                        0.0382\nGagarawa                    0.0459\nGamawa                      0.4182\nGanjuwa                     0.6998\nGanye                       0.5407\nGarki                       0.0009\nGarko                       0.2701\nGarum Mallam                0.1071\nGashaka                     0.9151\nGassol                      0.9349\nGaya                        0.1045\nGbako                       0.6384\nGboko                       0.7989\nGeidam                      0.0017\nGezawa                      0.0514\nGiade                       0.2722\nGirei                       0.1609\nGiwa                        0.0137\nGokana                      0.4157\nGombe                       0.0880\nGombi                       0.0649\nGoronyo                     0.8752\nGubio                       0.0008\nGudu                        0.1226\nGujba                       0.0084\nGulani                      0.6471\nGuma                        0.3675\nGumel                       0.0883\nGummi                       0.6621\nGurara                      0.5848\nGuri                        0.0106\nGusau                       0.3200\nGuyuk                       0.1935\nGuzamala                    0.0000\nGwadabawa                   0.1156\nGwagwalada                  0.3328\nGwale                       0.1834\nGwandu                      0.7451\nGwaram                      0.0741\nGwarzo                      0.1529\nGwer East                   0.5694\nGwer West                   0.0322\nGwiwa                       0.3100\nGwoza                       0.0006\nHadejia                     0.0506\nHawul                       0.0520\nHong                        0.0812\nIbadan North                0.8031\nIbadan North East           0.5549\nIbadan North West           0.1770\nIbadan South East           0.7088\nIbadan South West           0.2656\nIbaji                       0.1113\nIbarapa Central             0.4638\nIbarapa East                0.2676\nIbarapa North               0.1438\nIbeju/Lekki                 0.3036\nIbeno                       0.0005\nIbesikpo Asutan             0.0016\nIbi                         0.8092\nIbiono Ibom                 0.0195\nIdah                        0.0246\nIdanre                      0.0183\nIdeato North                0.3908\nIdeato South                0.7487\nIdemili North               0.1484\nIdemili South               0.0092\nIdo                         0.1804\nIdo-Osi                     0.3579\nIfako-Ijaye                 0.0518\nIfe Central                 0.6089\nIfe East                    0.2966\nIfe North                   0.4649\nIfe South                   0.0628\nIfedayo                     0.1942\nIfedore                     0.1433\nIfelodun (Kwara)            0.1323\nIfelodun (Osun)             0.6769\nIfo                         0.0790\nIgabi                       0.1616\nIgalamela-Odolu             0.4758\nIgbo-Etiti                  0.2315\nIgbo-Eze North              0.9294\nIgbo-Eze South              0.1546\nIgueben                     0.0074\nIhiala                      0.2096\nIhitte/Uboma                0.4873\nIjebu East                  0.0767\nIjebu North                 0.8811\nIjebu North East            0.5154\nIjebu Ode                   0.6093\nIjero                       0.5629\nIjumu                       0.0130\nIka                         0.0037\nIka North East              0.0128\nIka South                   0.9883\nIkara                       0.3017\nIkeduru                     0.7338\nIkeja                       0.0047\nIkenne                      0.9563\nIkere                       0.4777\nIkole                       0.2525\nIkom                        0.6424\nIkono                       0.0007\nIkorodu                     0.4417\nIkot Abasi                  0.0023\nIkot Ekpene                 0.0124\nIkpoba-Okha                 0.0177\nIkwerre                     0.9720\nIkwo                        0.5900\nIkwuano                     0.2493\nIla                         0.2764\nIlaje                       0.0105\nIle-Oluji-Okeigbo           0.1219\nIlejemeji                   0.6992\nIlesha East                 0.5460\nIlesha West                 0.6658\nIllela                      0.3026\nIlorin East                 0.7379\nIlorin South                0.8246\nIlorin West                 0.9637\nImeko-Afon                  0.9701\nIngawa                      0.1394\nIni                         0.1706\nIpokia                      0.8427\nIrele                       0.0092\nIrepo                       0.9388\nIrepodun (Kwara)            0.2278\nIrepodun (Osun)             0.6724\nIrepodun/Ifelodun           0.7782\nIrewole                     0.8455\nIsa                         0.8375\nIse/Orun                    0.2802\nIseyin                      0.3398\nIshielu                     0.2623\nIsi-Uzo                     0.1234\nIsiala-Ngwa North           0.4848\nIsiala-Ngwa South           0.1773\nIsiala Mbano                0.5796\nIsin                        0.1162\nIsiukwuato                  0.9311\nIsokan                      0.3358\nIsoko North                 0.1481\nIsoko South                 0.0106\nIsu                         0.3084\nItas/Gadau                  0.0185\nItesiwaju                   0.5660\nItu                         0.0071\nIvo                         0.2715\nIwajowa                     0.1021\nIwo                         0.5521\nIzzi                        0.2587\nJaba                        0.6105\nJada                        0.1991\nJahun                       0.0004\nJakusko                     0.0512\nJalingo                     0.8332\nJama'are                    0.2711\nJega                        0.2179\nJema'a                      0.8417\nJere                        0.0008\nJibia                       0.9005\nJos East                    0.3822\nJos North                   0.5490\nJos South                   0.4159\nKabba/Bunu                  0.0229\nKabo                        0.0412\nKachia                      0.0659\nKaduna North                0.0484\nKaduna South                0.0005\nKafin Hausa                 0.0096\nKafur                       0.3144\nKaga                        0.0014\nKagarko                     0.7379\nKaiama                      0.6629\nKaita                       0.7024\nKajola                      0.1308\nKajuru                      0.6662\nKala/Balge                  0.0030\nKalgo                       0.5210\nKaltungo                    0.1350\nKanam                       0.2277\nKankara                     0.0304\nKanke                       0.1594\nKankia                      0.0377\nKano Municipal              0.0568\nKarasuwa                    0.0142\nKaraye                      0.1517\nKarim-Lamido                0.5241\nKaru                        0.0537\nKatagum                     0.7729\nKatcha                      0.7001\nKatsina                     0.9698\nKatsina-Ala                 0.1679\nKaugama                     0.0013\nKaura                       0.2479\nKaura Namoda                0.5393\nKauru                       0.3699\nKazaure                     0.1626\nKeana                       0.1272\nKebbe                       0.2470\nKeffi                       0.8150\nKhana                       0.0271\nKibiya                      0.3348\nKirfi                       0.5691\nKiri Kasamma                0.0191\nKiru                        0.2018\nKiyawa                      0.0076\nKogi                        0.5299\nKoko/Besse                  0.0934\nKokona                      0.9052\nKolokuma/Opokuma            0.0111\nKonduga                     0.0000\nKonshisha                   0.8972\nKontagora                   0.1511\nKosofe                      0.0596\nKubau                       0.3439\nKudan                       0.8944\nKuje                        0.2148\nKukawa                      0.0030\nKumbotso                    0.0065\nKunchi                      0.1184\nKura                        0.2061\nKurfi                       0.3133\nKurmi                       0.4830\nKusada                      0.1504\nKwali                       0.1898\nKwami                       0.0052\nKwande                      0.7668\nKware                       0.7745\nKwaya Kusar                 0.0100\nLafia                       0.3523\nLagelu                      0.5920\nLagos Island                0.0046\nLagos Mainland              0.0282\nLamurde                     0.8209\nLangtang North              0.3668\nLangtang South              0.3983\nLapai                       0.2872\nLau                         0.1072\nLavun                       0.1984\nLere                        0.0858\nLogo                        0.4967\nLokoja                      0.0188\nMachina                     0.0174\nMadagali                    0.0179\nMadobi                      0.0309\nMafa                        0.0002\nMagama                      0.2304\nMagumeri                    0.0000\nMai'adua                    0.4238\nMaiduguri                   0.1097\nMaigatari                   0.0406\nMaiha                       0.8668\nMaiyama                     0.0035\nMakoda                      0.0592\nMakurdi                     0.0233\nMalam Madori                0.0766\nMalumfashi                  0.0247\nMangu                       0.2806\nMani                        0.5659\nMaradun                     0.0749\nMariga                      0.1438\nMarkafi                     0.9536\nMarte                       0.0006\nMaru                        0.7290\nMashegu                     0.6905\nMashi                       0.8549\nMatazu                      0.0946\nMayo-Belwa                  0.5726\nMbaitoli                    0.6012\nMbo                         0.0006\nMichika                     0.7359\nMiga                        0.0031\nMikang                      0.3791\nMinjibir                    0.0090\nMisau                       0.9083\nMkpat Enin                  0.0001\nMoba                        0.2838\nMobbar                      0.0001\nMokwa                       0.5226\nMonguno                     0.0001\nMopa-Muro                   0.0671\nMoro                        0.7405\nMubi North                  0.5177\nMubi South                  0.2476\nMusawa                      0.0396\nMushin                      0.0031\nMuya                        0.1337\nNafada                      0.0848\nNangere                     0.3127\nNasarawa-Eggon              0.9967\nNasarawa (Kano)             0.0261\nNasarawa (Nasarawa)         0.0212\nNdokwa East                 0.1873\nNdokwa West                 0.0194\nNembe                       0.0820\nNgala                       0.0030\nNganzai                     0.0002\nNgaski                      0.1735\nNgor-Okpala                 0.9803\nNguru                       0.0242\nNingi                       0.1023\nNjaba                       0.3729\nNjikoka                     0.0599\nNkanu East                  0.2815\nNkanu West                  0.0065\nNkwerre                     0.8191\nNnewi North                 0.0178\nNnewi South                 0.0128\nNsit Atai                   0.0054\nNsit Ibom                   0.0154\nNsit Ubium                  0.0002\nNsukka                      0.4151\nNuman                       0.4366\nNwangele                    0.7651\nObafemi-Owode               0.3296\nObanliku                    0.3852\nObi (Benue)                 0.7865\nObi (Nasarawa)              0.5400\nObi Ngwa                    0.0012\nObia/Akpor                  0.0365\nObokun                      0.3832\nObot Akara                  0.0030\nObowo                       0.8649\nObubra                      0.2973\nObudu                       0.5901\nOdeda                       0.5061\nOdigbo                      0.1001\nOdo-Otin                    0.1762\nOdogbolu                    0.7001\nOdukpani                    0.0055\nOffa                        0.3654\nOfu                         0.0007\nOgba/Egbema/Ndoni           0.3745\nOgbadibo                    0.5927\nOgbaru                      0.1101\nOgbia                       0.2789\nOgbomosho North             0.8482\nOgbomosho South             0.8236\nOgo Oluwa                   0.9379\nOgoja                       0.7945\nOgori/Magongo               0.3233\nOgu/Bolo                    0.2470\nOgun waterside              0.1415\nOguta                       0.1350\nOhafia                      0.9158\nOhaji/Egbema                0.5488\nOhaozara                    0.2400\nOhaukwu                     0.2698\nOhimini                     0.0113\nOji-River                   0.0426\nOjo                         0.8042\nOju                         0.3454\nOke-Ero                     0.0680\nOkehi                       0.2061\nOkene                       0.0407\nOkigwe                      0.6325\nOkitipupa                   0.0110\nOkobo                       0.0001\nOkpe                        0.0082\nOkpokwu                     0.0349\nOkrika                      0.0022\nOla-oluwa                   0.5746\nOlamabolo                   0.0498\nOlorunda                    0.2113\nOlorunsogo                  0.5828\nOluyole                     0.7968\nOmala                       0.0014\nOmumma                      0.7958\nOna-Ara                     0.8263\nOndo East                   0.0260\nOndo West                   0.0652\nOnicha                      0.1319\nOnitsha North               0.2780\nOnitsha South               0.5554\nOnna                        0.0006\nOpobo/Nkoro                 0.0119\nOredo                       0.2621\nOrelope                     0.6114\nOrhionmwon                  0.0023\nOri Ire                     0.9612\nOriade                      0.0401\nOrlu                        0.7718\nOrolu                       0.7575\nOron                        0.0008\nOrsu                        0.0663\nOru East                    0.8163\nOru West                    0.9683\nOruk Anam                   0.0020\nOrumba North                0.2491\nOrumba South                0.4238\nOse                         0.0121\nOshimili North              0.1567\nOshimili South              0.1700\nOshodi-Isolo                0.0226\nOsisioma Ngwa               0.2667\nOsogbo                      0.9529\nOturkpo                     0.0048\nOvia North East             0.0016\nOvia South West             0.0016\nOwan East                   0.0215\nOwan West                   0.1049\nOwerri-Municipal            0.8559\nOwerri North                0.2316\nOwerri West                 0.5141\nOwo                         0.3124\nOye                         0.9037\nOyi                         0.1340\nOyigbo                      0.0733\nOyo East                    0.1555\nOyo West                    0.3883\nOyun                        0.2258\nPaikoro                     0.8634\nPankshin                    0.2090\nPatani                      0.0191\nPategi                      0.0693\nPort-Harcourt               0.0740\nPotiskum                    0.3690\nQua'an Pan                  0.5593\nRabah                       0.7568\nRafi                        0.0961\nRano                        0.2405\nRemo North                  0.5177\nRijau                       0.2122\nRimi                        0.6257\nRimin Gado                  0.0169\nRingim                      0.0039\nRiyom                       0.9631\nRogo                        0.3668\nRoni                        0.0389\nSabon-Gari                  0.2070\nSabon Birni                 0.7870\nSabuwa                      0.3236\nSafana                      0.2344\nSagbama                     0.0022\nSakaba                      0.4073\nSaki East                   0.9062\nSaki West                   0.9152\nSandamu                     0.9285\nSanga                       0.9216\nSapele                      0.0344\nSardauna                    0.7553\nShagamu                     0.2203\nShagari                     0.0975\nShanga                      0.3932\nShani                       0.8990\nShanono                     0.0558\nShelleng                    0.0347\nShendam                     0.7121\nShinkafi                    0.4732\nShira                       0.1635\nShiroro                     0.0486\nShomgom                     0.6965\nShomolu                     0.0100\nSilame                      0.0772\nSoba                        0.5185\nSokoto North                0.9173\nSokoto South                0.7845\nSong                        0.1217\nSouthern Ijaw               0.0072\nSule-Tankarkar              0.1708\nSuleja                      0.9023\nSumaila                     0.2578\nSuru                        0.0270\nSurulere (Lagos)            0.0015\nSurulere (Oyo)              0.8362\nTafa                        0.2747\nTafawa-Balewa               0.0482\nTai                         0.1098\nTakai                       0.0236\nTakum                       0.3137\nTalata Mafara               0.2273\nTambuwal                    0.2233\nTangaza                     0.0734\nTarauni                     0.2574\nTarka                       0.2589\nTarmua                      0.0263\nTaura                       0.0015\nTofa                        0.0064\nToro                        0.0511\nToto                        0.0239\nToungo                      0.9290\nTsafe                       0.3963\nTsanyawa                    0.0289\nTudun Wada                  0.0297\nTureta                      0.4661\nUdenu                       0.5345\nUdi                         0.0321\nUdu                         0.0031\nUdung Uko                   0.0215\nUghelli North               0.0001\nUghelli South               0.0012\nUgwunagbo                   0.0364\nUhunmwonde                  0.0029\nUkanafun                    0.0529\nUkum                        0.7067\nUkwa East                   0.0027\nUkwa West                   0.5739\nUkwuani                     0.1198\nUmu-Nneochi                 0.6263\nUmuahia North               0.6339\nUmuahia South               0.8395\nUngogo                      0.0148\nUnuimo                      0.2954\nUruan                       0.0011\nUrue-Offong/Oruko           0.0006\nUshongo                     0.7526\nUssa                        0.4691\nUvwie                       0.4109\nUyo                         0.0000\nUzo-Uwani                   0.8557\nVandeikya                   0.4871\nWamako                      0.4678\nWamba                       0.9616\nWarawa                      0.1601\nWarji                       0.0334\nWarri North                 0.0023\nWarri South                 0.0026\nWarri South West            0.0659\nWasagu/Danko                0.9065\nWase                        0.8339\nWudil                       0.0448\nWukari                      0.4029\nWurno                       0.7983\nWushishi                    0.9159\nYabo                        0.4771\nYagba East                  0.2223\nYagba West                  0.0372\nYakurr                      0.8725\nYala                        0.3281\nYamaltu/Deba                0.6923\nYankwashi                   0.6353\nYauri                       0.1352\nYenegoa                     0.9820\nYola North                  0.8829\nYola South                  0.0235\nYorro                       0.8554\nYunusari                    0.0069\nYusufari                    0.0163\nZaki                        0.0101\nZango                       0.9104\nZango-Kataf                 0.7989\nZaria                       0.1070\nZing                        0.4598\nZurmi                       0.1168\nZuru                        0.7942\n\n\n\n\nMapping the local Moran’s I\nLet’s first append the local Moran’s I data frame onto nga_wp SpatialPolygonDataFrame.\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nWe then plot the local Moran’s I values on the township boundaries.\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran Statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_legend(legend.outside = TRUE)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nAlthough the map above shows that there are both positive and negative Ii values, let’s plot the p-values to check if they are statistically significant.\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_legend(legend.outside = TRUE)\n\n\n\n\nLet’s plot them side by side for easy comparison.\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran Statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_legend(legend.outside = TRUE)\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_legend(legend.outside = TRUE)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nSome legend labels were too wide. These labels have been resized to 0.53, 0.59, 0.59, 0.59, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\nThe plots above show that most of the clusters with positive Ii values are statistically significant at 5% significance level."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#creating-lisa-cluster-map",
    "href": "Take-home_Ex1/Take-home_Ex1.html#creating-lisa-cluster-map",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Creating LISA Cluster Map",
    "text": "Creating LISA Cluster Map\nNext, we’ll use LISA cluster map to identify the types of the spatial autocorrelation of the clusters.\n\nPlotting Moran Scatterplot\nLet’s first plot the Moran scatterplot to compare the non-functional water point rates in the regions against their neighbours.\n\nnci <- moran.plot(nga_wp$wpt_nonfunc_pct, rswm_q,\n                  labels = as.character(nga_wp$shapeName), \n                  xlab = \"Proportion of Non-functional Water Points\", \n                  ylab = \"Spatially Lag\",\n                  zero.policy = TRUE)\n\n\n\n\nThere are four quadrants in the plot. Top right and bottom left quadrants indicate the existence of clusters, and the other two quadrants indicate the outliers. The graph below demonstrates the definition of the clusters and outliers.\n\n\n\nPlotting Moran scatterplot with standardized variables\nNext, we’ll standardize the non-functional water point rates and plot the Moran scatterplot again.\n\nnga_wp$Z.wpt_nonfunc_pct <- scale(nga_wp$wpt_nonfunc_pct) %>% \n  as.vector \n\n\nnci2 <- moran.plot(nga_wp$Z.wpt_nonfunc_pct, rswm_q,\n                  labels = as.character(nga_wp$shapeName), \n                  xlab = \"z-Proportion of Non-functional Water Points\", \n                  ylab = \"z-Spatially Lag\",\n                  zero.policy = TRUE)\n\n\n\n\n\n\nPreparing LISA map classes\nNext, let’s prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\", length = nrow(localMI))\n\nNext, we’ll derive the spatially lagged non-functional water points rate, and center the spatially lagged variable around its mean.\n\nnga_wp$lag_wpt_nonfunc_pct <- lag.listw(rswm_q, nga_wp$wpt_nonfunc_pct, zero.policy = TRUE, na.action = na.omit)\n\nDV <- nga_wp$lag_wpt_nonfunc_pct - mean(nga_wp$lag_wpt_nonfunc_pct)     \n\nWe also center the local Moran’s I around its mean.\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nAnd we will use 5% as the significance level.\n\nsignif <- 0.05\n\nNext, we’ll define the four quadrants as shown in the Moran scatterplot.\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4\n\nAnd place the non-significant Moran in category 0.\n\nquadrant[localMI[,5] > signif] <- 0\n\n\n\nPlotting LISA map\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_legend(legend.outside=TRUE)\n\n\n\n\nLet’s plot all the maps together for easy comparison.\n\nwpt_nonfunc_pct <- qtm(nga_wp, \"wpt_nonfunc_pct\")\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap  <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(wpt_nonfunc_pct, LISAmap,\n             asp=0, ncol=2)\n\n\n\n\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran Statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map,\n             asp=0, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nWe could observe from the plots above that:\n\nThere is a big cluster of townships with low non-functional water point rates at the north-eastern part of Nigeria\nThere are also a few small clusters with high non-functional water point rates at the southern part of the country.\nThere are a few ourliers in the northern Nigeria where the townships having high non-functional water point rates but their neighbours have low non-functional water point rates.\nOn the other hand, there are a few townships in the central and north-western part of the country having low non-functional water point rates but their neighbours have high non-functional water point rates."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nNext, let’s check if there is any township having significantly high or low non-functional water point rates.\n\nGetis and Ord’s G-Statistics\nWe’ll use Getis and Ord’s G-statistics to check if there are any\n\nhot-spots within the clusters having high non-functional water point rates\ncold-spots within the clusters having low non-functional water point rates\n\nDeriving distance-based weight matrix\nFirst, we’ll re-define the neighbours based on distance. There are two types of distance-based proximity matrix:\n\nfixed distance weight matrix\nadaptive distance weight matrix\n\nRegardless of the type of the distance-based proximity matrix, we need to derive the centroid of the townships first.\nIn order to derive the centroid, we need to obtain the coordinates of the townships.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\n\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\n\ncoords <- cbind(longitude, latitude)\n\nDetermine the cut-off distance\nLet’s determine the upper limit for distance band by checking the distance distribution.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.662  12.815  20.242  22.031  27.706  71.661 \n\n\nWe use the largest first nearest neighbour distance, 71.661, as the upper threshold to ensure all the townships will have at least one neighbour.\nComputing fixed distance weight matrix\nNext, we compute the distance matrix.\n\nwm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18112 \nPercentage nonzero weights: 3.023323 \nAverage number of links: 23.40052 \n\n\nNext, we convert the nb object into spatial weights object.\n\nwm72_lw <- nb2listw(wm_d72, style = 'B')\nsummary(wm72_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18112 \nPercentage nonzero weights: 3.023323 \nAverage number of links: 23.40052 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  8 12 21 32 35 33 35 28 36 25 21 19 23 16 14 10 13 15 17 16 11 13 10  6 12 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  5 16 13 12  7  9  9 12  7 12 15 13  9 10  4  5  4  7  8  8  8  6  5  3  2 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 \n 3  4  5  3  6  5  2  6  4  8  8  4  4  3  1  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 70 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 774 599076 18112 36224 2614072"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix",
    "href": "Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Computing Adaptive Distance Weight Matrix",
    "text": "Computing Adaptive Distance Weight Matrix\nHowever, fixed distance might lead us to biased results because more densely settled areas (e.g., urban area) would have more neighbours, and less densely settled areas (e.g., rural area) would have less neighbours. Having many neighbours smoothes the neighbout relationship across more neighbours.\nTo avoid this, we could control the number of neighbours directly either accepting asymmetric neighbours or imposing symmetric. In this exercise, let’s try to limit the number of neighbours to 8 first.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nThen convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11152 201942"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics",
    "href": "Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Computing Gi Statistics",
    "text": "Computing Gi Statistics\n\nGi statistics using fixed distance\nLet’s first calculate the Gi statistics using the fixed distance weight matrix we derived earlier.\n\nfips <- order(nga_wp$shapeName)\ngi.fixed <- localG(nga_wp$wpt_nonfunc_pct, wm72_lw)\ngi.fixed\n\n  [1]  3.204602803  3.098557270 -2.425340042  0.286131989  7.903673442\n  [6] -2.111148235 -2.130807976 -2.790929038 -1.530868004  1.504448737\n [11] -0.308731141  0.700692197  3.287970247 -2.217587559 -3.785127701\n [16]  2.152588185 -1.131638858 -0.680224304  0.064385939  0.113658205\n [21]  3.626975891 -3.398416967 -2.753890558  1.327639407  0.284065104\n [26] -0.474116289  0.385597211  0.629388092  0.424029478  2.383870133\n [31]  3.684085850 -3.664662855 -4.500697715  2.201786690 -0.798963422\n [36]  1.405316280  3.922589809  3.340510724  2.868054140  2.596525461\n [41]  2.136129928  4.813426704 -1.175645559  2.129100915  2.715470282\n [46]  0.757663260 -3.829160500  2.277565103 -3.658819162  0.848974512\n [51] -3.845175747 -2.784744139 -1.260194257 -2.517620236  3.041828169\n [56] -2.221844678  0.270479188 -0.298762397 -0.334184376  2.975108418\n [61]  4.256981864 -3.557662820  0.198633528  1.227114296  1.607228520\n [66]  3.705094663  1.134988438 -0.319051468  0.403539258  1.753549669\n [71]  2.361475857 -1.370086424 -1.196050671  1.051489949 -3.753003247\n [76]  0.904934704 -2.808096990 -2.892347115 -3.209230381 -2.383999543\n [81] -3.255957082 -4.292378679 -2.697958410  2.993678715 -4.801439507\n [86]  4.917633583 -1.057649264 -0.115454753 -1.031290143  0.167488536\n [91] -2.972350998 -0.387121756  0.040555509  3.385688463 -1.308875065\n [96] -1.591565533 -1.411617720 -1.485278118 -2.082520218  0.163538115\n[101] -4.004311263 -0.120284431  1.283304585  2.716281268 -4.756508258\n[106]  0.807197840  0.372339667 -1.158098429  1.066519008 -3.140224594\n[111] -3.567210764  1.966197990  2.128266161 -1.577570997 -1.882052048\n[116]  0.690028875 -1.813014816  0.338437767  0.005411357  2.237023745\n[121]  4.218238645  2.155370003  0.279387264  1.854373169  0.511231380\n[126]  1.529011947 -3.418435541  0.264766707 -1.121187615 -4.661442516\n[131]  2.103792049 -2.350330889  0.358430570  4.574474040  0.530089503\n[136]  5.725797762  5.627477417 -0.071004155 -2.136342074 -1.736097707\n[141]  0.446662246 -5.260021302 -2.456219661 -0.962261591 -4.376213238\n[146] -2.386077647 -2.568913617  2.395900578 -0.068376543  0.013277182\n[151] -0.916545508  0.630032062 -1.894712997 -1.654192894 -5.217355147\n[156] -4.720909280 -0.662930411  3.227551789 -1.527028157 -3.842281859\n[161] -1.430177316  3.128516783  0.791945441  2.211057392 -2.310731482\n[166] -3.963393626 -1.362917228 -2.523031430  5.883354154 -2.243867909\n[171]  0.080562910  1.893566515  1.508583665  0.409897124  2.455992622\n[176] -2.036615830 -3.189131471 -0.658187406  1.136580374  3.852417203\n[181] -0.845587787  0.485745979  3.093255095  7.939828295  2.134440007\n[186]  3.333076781  2.131595307  2.529816661 -1.772914253  2.353050669\n[191] -0.908736075  2.681420938 -3.476755759 -3.371519356 -3.364767778\n[196] -2.887752975  3.661255187  3.557243230  1.426959017  3.457780592\n[201]  3.046840102  6.958091522  6.173270940  1.082938967  4.863348624\n[206]  3.988381135 -3.184543060  5.699374838  8.353759587  4.915591166\n[211]  4.721341222  5.208503173  0.424098544 -3.451378773 -3.723087010\n[216]  1.397162031 -1.939973060 -2.204069223 -5.030582226  1.739284250\n[221] -0.834124092  0.850249944 -0.883429635  1.967667004 -2.159645401\n[226]  0.091738535 -5.102157209  1.888405434 -3.760458729 -2.280661829\n[231] -1.305375503 -0.512442443 -3.787536352 -3.907889882 -4.379290759\n[236]  0.153565802 -0.296050487 -4.488194257  0.302433652  0.550320615\n[241] -2.587758190 -5.433976028 -0.997858852 -1.110560619  0.346929960\n[246]  2.737150485  2.370397006 -1.845890586 -0.362965552 -3.365014736\n[251]  1.291894022 -2.049997232 -0.991831641  2.093578038 -3.903179153\n[256]  0.452612754  1.570941186 -2.886475334 -0.590737802 -1.605042377\n[261] -4.211751812  0.855990586  0.702937201 -5.118406295  1.520581367\n[266] -1.751056321 -4.506134975  1.221069132  2.459013627 -1.879864046\n[271] -2.280083944 -4.426323238 -1.414303958  1.134252839 -0.971184859\n[276] -0.965399819 -1.197860203 -1.257094955 -1.068703613  0.814144942\n[281] -1.630137199 -1.677238388 -1.480549195 -3.463240212  6.701343143\n[286]  7.785517418  0.209733908  7.062513919  3.156633136  3.076797967\n[291] -2.646697201 -2.360122952 -1.786696981 -2.256444438 -1.222574185\n[296]  2.329553122 -3.600094814  2.132174067  1.961864406  1.361441566\n[301]  2.026042301  2.708297873  2.265903909  2.137214847  1.211275925\n[306] -3.445242650  1.843238248  0.959392692 -2.360875973  0.054213445\n[311]  0.308589872  2.756530064 -1.718090552  0.382792117  1.366415101\n[316] -0.841862489 -0.967764706 -1.884553662  1.996057864  3.063560317\n[321]  4.905097893  2.027706495  2.899005111 -1.416166686 -0.846839361\n[326] -3.379080005 -3.606704060  1.935289198  2.505836182 -0.776740670\n[331]  6.381707727 -3.584677609  6.067709037  5.940734970  3.437286930\n[336] -0.720067938 -1.420853405  4.150258544  2.341379815  3.315445194\n[341]  2.270592626  2.329042827  2.386142157  2.269845314  0.597120747\n[346]  1.531035928  1.389759034  1.377423689 -0.083614581 -2.136262856\n[351]  5.217508112 -3.799778845  3.393565444 -0.048173094  2.006658238\n[356]  1.501760281  2.372496620  0.059492375  0.205038334  2.507685384\n[361] -1.248328254 -2.854886644 -3.113583786  3.157641062  3.005261566\n[366] -1.327508453  2.205862813 -1.617869384 -0.213412745  3.210701197\n[371]  2.893345653 -1.871372694 -2.743248447 -0.881937344  7.577765399\n[376] -1.195283397 -1.480101323  0.016630633 -1.547187838  0.704820343\n[381] -1.068571457 -4.549706708 -2.061710384 -0.228509302 -3.573226010\n[386]  2.259158341  0.620527250 -3.291434624 -0.894237000 -1.530124224\n[391] -0.774825123 -0.993372728  3.172826175 -5.128234235  0.835262851\n[396]  1.875534616  2.958634185 -3.487141368 -2.335788578 -3.199806885\n[401]  0.641913187 -0.268643600  0.131829577 -1.665027012 -1.527704230\n[406] -2.972350998  2.057101013 -0.143231872 -1.472441041 -2.634121884\n[411] -1.743891529 -2.950905822 -5.149464901 -2.605236063 -4.271650486\n[416]  0.447796816  0.845368824 -1.558474887  0.194197194 -0.468051372\n[421]  1.329798549 -3.539722657 -0.277423053 -1.043163661  0.642537308\n[426] -2.855380785  0.983433210  1.908615175  0.814392291  4.822112722\n[431] -4.002828010  1.381724810 -3.694574129 -3.620437309 -4.094483476\n[436]  1.068827542  1.677561846  0.146132889  3.053055766 -3.254893421\n[441] -0.126165477  1.435560338 -3.549361678 -1.726792015 -0.804332411\n[446]  0.752270918 -2.972350998 -5.166550716 -4.245655726 -4.997831200\n[451] -2.285959155  0.526880664 -3.002380406  0.817094728  2.505880792\n[456]  0.502546273  1.032849093 -0.367006487  0.840870774 -0.260780664\n[461] -3.696641329 -3.487873961 -0.065222187 -1.095705478 -0.714851965\n[466]  1.391654650 -1.338552697  0.723674068 -2.188999599  0.535399319\n[471]  2.371156533 -2.622348641  0.031743595 -4.623005049 -4.055098887\n[476]  1.459422019 -3.246531094 -0.375326666 -2.840931959 -3.443971044\n[481]  2.563327965  2.872862632 -4.067104441  2.664231769 -4.028796884\n[486] -2.840048606 -1.202907080 -1.305677516 -1.822306277  0.488253303\n[491] -1.367521003 -3.434406156 -0.481591858  0.254023420 -0.461895507\n[496] -3.285905547 -1.199789167 -1.501271236  6.155673133  0.586682522\n[501] -4.154500744 -1.119014341 -4.729240431 -0.341829900  7.533281464\n[506]  2.231451298 -2.425340042  0.118958940 -4.211751812  2.630631433\n[511]  0.233336819 -0.412413943  0.317462436 -3.573406329 -3.576671980\n[516]  0.765581906  1.605375352 -0.999565221 -5.378534812  1.716945119\n[521]  0.647440867 -1.349660167  0.149676522  0.613777444 -3.434406156\n[526] -3.651208305  1.759442269  1.554584789 -2.539085454 -1.886616715\n[531] -2.116685087 -3.129960078 -3.053928725 -3.430673040 -2.421345134\n[536] -1.901171269 -2.128423742  7.878162288  8.176259730  7.889650329\n[541] -1.141548193 -0.684539279 -2.297941288 -3.527040920  0.667318020\n[546]  0.918415918  0.924121704  4.096567182  0.002039832  2.318521384\n[551]  5.498386559  1.298775941 -1.003878632  0.314991905 -1.212490186\n[556]  2.370746759  1.335428278 -3.701091137  7.200000804  1.270300410\n[561]  2.271950017  0.213386575 -1.001681032 -1.499643167  1.607538889\n[566]  0.138618637  0.226996799  0.032651743 -0.830295791  3.573034117\n[571]  2.524680910  2.237738142 -1.309104797  1.857879043 -0.326343532\n[576] -1.420714170 -2.916652027  1.886207202 -3.479360857 -3.938055648\n[581] -0.270507585  2.013601852  2.655008830  3.666901576 -2.559229679\n[586]  2.577557422  7.588556481  5.512685832 -0.253358781  1.870688587\n[591]  0.483585173  1.716522054  1.331518831 -0.508020122 -0.908770879\n[596]  3.323460300  2.249313819 -1.015226300  2.654302908  2.860321091\n[601] -1.976658380 -1.026840518 -0.870341962  8.270307954  4.566485020\n[606]  3.659647263 -0.860650117  3.720436659  0.205765710  2.499112998\n[611] -2.589090126  1.316810950  6.858360412 -2.220807703 -2.038839986\n[616] -1.820717257  6.662200697 -3.547533611 -2.941136952  2.393009142\n[621] -0.497431443 -1.361148559 -3.551865880  2.823583093  1.760079918\n[626]  2.840008575  3.902388485  3.680628786  4.728236762  3.609809131\n[631] -0.613966357  0.177933385 -0.718211652  2.499563925  2.457624007\n[636] -2.424813876  3.874788488 -0.762578321 -1.647163604  1.275467282\n[641]  0.143755907 -1.455280883  2.812567036  1.772102832  1.118478695\n[646]  0.175368181  0.165859602 -0.046985836  0.132607076 -4.130734847\n[651] -3.071853877  1.187906131 -1.021982988 -4.822101291 -4.524114416\n[656] -0.548768220 -2.260143999 -3.096559341  0.248737530 -0.026172018\n[661]  0.080024025 -1.725123556  3.257628678  0.828612677 -0.954323961\n[666] -0.478049976 -1.493324902  0.308735418  4.263855798  0.147337316\n[671] -3.740991956  0.797959444  1.283114091 -0.570290861 -4.837776295\n[676] -2.003701956 -0.369087344 -0.296023360 -2.230928615  1.584051821\n[681]  0.632605184 -3.640260847  1.665668581 -0.020709719  1.437023567\n[686]  1.484337593 -1.337195597  3.746638295 -3.124505081  1.446136335\n[691] -2.823091738  2.617541398 -3.513686192  0.616681192  1.676858613\n[696] -1.844242154  2.906791851 -3.174694859  1.126499851 -0.875836955\n[701]  0.981997991  0.607500682 -5.085615108  1.808538853 -2.158078446\n[706] -5.046535358 -4.829937978 -1.729753999  2.528173398  0.101287807\n[711] -1.073945706 -4.572395451 -3.031950792 -0.673030452 -1.147144073\n[716] -3.678875026  5.073949152  6.199539906  4.097482675  4.817814190\n[721]  3.370953368  4.107965904  5.946786583  0.601335073  4.584171991\n[726]  2.866765716  1.454927055 -3.150844626  1.403398926  2.474634506\n[731] -5.140401166 -2.214753750  7.711344119  7.063397229  0.259056874\n[736]  1.128718369  5.564727007  7.993102537 -1.002123387  0.463362908\n[741]  0.664440202  0.590474572 -5.364785354 -2.335302325  3.661201189\n[746]  4.161650986  3.396328741  0.205972468 -0.388603718 -4.892561638\n[751]  0.627234016  0.614589850 -0.328225547  0.913395653  2.436998297\n[756]  1.873140609 -0.183915141 -1.551749108  1.143699604 -1.952518942\n[761]  1.650112194  1.342361434 -1.750646555 -2.182057755 -0.760733709\n[766] -1.796415954 -1.612743741 -2.537153369 -0.836290190  0.386854799\n[771]  0.137269041 -0.855376372 -1.568320858 -0.028364159\nattr(,\"cluster\")\n  [1] High High Low  High High Low  High Low  High High Low  High High Low  High\n [16] High Low  High High High High Low  Low  High High High Low  High Low  Low \n [31] High Low  Low  High Low  High High High High High High High Low  High Low \n [46] Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High\n [61] High Low  Low  High High Low  Low  Low  Low  High High Low  High High Low \n [76] High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low  High Low \n [91] Low  Low  Low  High Low  High Low  Low  High Low  Low  High Low  High Low \n[106] Low  High Low  High Low  Low  High Low  Low  Low  High Low  High Low  High\n[121] High Low  Low  High Low  High Low  Low  Low  Low  High Low  High High High\n[136] Low  High High Low  Low  High High Low  High Low  Low  Low  High High High\n[151] High High Low  High Low  Low  Low  High Low  Low  High High High High Low \n[166] Low  Low  Low  High Low  High Low  Low  High High High Low  Low  Low  High\n[181] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[196] High High High High High High High High High High High Low  High High High\n[211] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High\n[241] Low  Low  Low  Low  High High High Low  High Low  High Low  High High High\n[256] Low  Low  Low  Low  High Low  High High Low  High Low  Low  High High Low \n[271] Low  High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High\n[286] High Low  High High High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High High High High High Low  High High Low  Low  Low  High Low  High Low \n[316] High High Low  High High High Low  High Low  Low  Low  Low  High High High\n[331] High Low  High High High Low  Low  High High High High High High High High\n[346] Low  High High Low  Low  High High High Low  High High Low  High Low  Low \n[361] Low  Low  High Low  High High High Low  High High High Low  Low  Low  High\n[376] High Low  Low  Low  High High Low  Low  High Low  High High Low  Low  Low \n[391] Low  High High Low  High High Low  Low  Low  Low  High High Low  Low  Low \n[406] Low  High Low  Low  Low  Low  Low  Low  Low  High High High Low  Low  Low \n[421] Low  Low  High Low  Low  Low  High High Low  High Low  High Low  Low  Low \n[436] High High High Low  Low  Low  High Low  Low  High High Low  Low  Low  Low \n[451] Low  High Low  High High High High Low  Low  High Low  Low  Low  Low  High\n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  Low \n[481] Low  High Low  High Low  Low  Low  High Low  High Low  Low  Low  High High\n[496] Low  Low  Low  High Low  Low  Low  Low  Low  High High Low  High Low  High\n[511] High High High Low  Low  High High Low  High High High High High High Low \n[526] Low  High Low  Low  Low  High High Low  High High Low  Low  High High High\n[541] Low  Low  High Low  High Low  High High Low  High High High High High Low \n[556] High High Low  High High High Low  High Low  High Low  High High Low  High\n[571] Low  High High High Low  Low  Low  High Low  High Low  High High High High\n[586] High High High High Low  Low  High High Low  Low  High Low  High High High\n[601] Low  Low  Low  High High High High High Low  High Low  High High Low  Low \n[616] Low  High Low  Low  High Low  High Low  High High High High High High High\n[631] Low  High Low  High High High Low  Low  Low  High High Low  High High Low \n[646] Low  Low  Low  Low  Low  High High High Low  Low  Low  High Low  High High\n[661] High Low  High High High Low  High High High High High Low  High Low  Low \n[676] High Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High Low  Low \n[691] Low  High Low  High Low  Low  High Low  High High High High Low  Low  Low \n[706] Low  Low  Low  High Low  Low  Low  High High Low  Low  High High Low  High\n[721] High High High High High High High Low  Low  High Low  Low  High High High\n[736] High High High Low  Low  High High Low  Low  High High High High Low  Low \n[751] High High High High High High High Low  High Low  High High Low  High Low \n[766] Low  Low  Low  Low  Low  High Low  Low  High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$wpt_nonfunc_pct, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, we join the Gi values to nga_wp data frame.\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nLet’s plot the Gi values derived using fixed distance weight matrix on the township boundaries.\n\nwpt_nonfunc_pct <- qtm(nga_wp, \"wpt_nonfunc_pct\")\n\nGimap <-tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"Local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wpt_nonfunc_pct, Gimap,\n             asp=0, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFrom the plots above, we observe that there are a few townships in the north-eastern and nothern parts of the country having significantly lower non-functional water point rates than their neighbours (i.e., cold-spots). On the other hand, there are a few townships in the southern part having significantly higher non-functional water point rates than their neighbours (i.e., hot-spots).\n\n\nGi statistics using adaptive distance\nNext, let’s try to derive the Gi statistics using adaptive distance weight matrix computed earlier.\n\nfips <- order(nga_wp$shapeName)\ngi.adaptive <- localG(nga_wp$wpt_nonfunc_pct, knn_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nLet’s plot the Gi values derived using fixed distance weight matrix on the township boundaries.\n\nwpt_nonfunc_pct <- qtm(nga_wp, \"wpt_nonfunc_pct\")\n\nGimap <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"Local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(wpt_nonfunc_pct, Gimap, \n             asp=0, ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFrom the plots above we could see that the hot-spots and cold-spots have been changed comparing to the plots using fixed distance weight matrix. The cold spots are centered at the northeast corner of the county, and the hot spots are centered at the southern part now."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "Conclusion",
    "text": "Conclusion\nAfter performing the relevant global and local analysis and tests on the non-functional water points in Nigeria, we successfully discovered the following insights:\n\nThere are indeed area / clusters containing townships having low non-functional water point rates, and there are also area / clusters containing townships having high non-functional water point rates\nThere are area having low non-functional water point rates but surrounded by neighbours having high non-functional water point rates. There are also area having high non-functional water point rates but surrounded by neighbours having low non-functional water point rates. Further investigation into those area might help the government to gain in-depth understanding about them, and could help them to improve the water supply system.\nThere are townships having significantly lower non-functional water point rates among the low rate clusters, and there are townships having significantly higher rates among the high rate clusters.\n\nThank you!"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#references",
    "href": "Take-home_Ex1/Take-home_Ex1.html#references",
    "title": "Take-home Exercise 1: Geospatial Analytics for Social Good",
    "section": "References",
    "text": "References\n\nUNICEF. (2022, March 22). Nearly one third of Nigerian children do not have enough water to meet their daily needs - UNICEF. https://www.unicef.org/nigeria/press-releases/nearly-one-third-nigerian-children-do-not-have-enough-water-meet-their-daily-needs"
  }
]