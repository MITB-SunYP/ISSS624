---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good"
editor: visual
---

## Background

In Singapore, people are used to access clean water any where and any time. The convenience of getting clean water makes some people forget how precious clean water is, can how difficult it is for people living in other countries to use clean water.

Nigeria is one of the countries still facing severe water crisis, and about one third of the children there don't have enough water to meet their daily needs.

In this take-home exercise, we are going to analyze the water point related data in Nigeria to reveal the spatial patterns of Not Functional water points.

## Problem Statement

-   Apply global measures of spatial association techniques to study if the Not Functional water points are evenly distributed across Nigeria.
-   Apply local measures of spatial association techniques to study if there are any area having more Not Functional water points.

## Getting Started

### Data sources

-   **Aspatial Data**

A set of a spatial data containing the water point related information is downloaded from [Water Point Data Exchange (WPdx)](https://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data) website.

The original data set contains the data from 17 countries, and only the subset of Nigeria is used for the analysis in this exercise.

-   **Geospatial Data**

Nigeria Level-2 Administrative Boundary polygon features GIS data downloaded from [geoBoundaries](https://www.geoboundaries.org/) will be used in this exercise.

### Loading R Packages

First of all, let's load the required R packages into R:

-   **sf**: importing, managing and processing geospatial data.

-   **spdep**: computing spatial weights and spatially lagged variables.

-   **tmap**: plotting Thematic Maps

-   **tidyverse**: importing, wrangling and visualizing data. It consists of a family of R packages, including **readr**, **readxl**, **tidyr**, **dplyr** and **ggplot2**.

-   **stringr**: transforming text data

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, stringr)

```

### Importing Data

**Aspatial Data**

Let's import the aspatial data containing the water point information.

```{r}
#| eval: false
wp <- read_csv("Data/Water_Point_Data_Exchange-Plus_WPdx.csv")

```

The data set contains 406,566 rows and 70 columns.

```{r}
#| eval: false
table(wp$`#clean_country_name`)

#| eval: false
length(table(wp$`#clean_country_name`))

```

The aspatial data set contains data from 17 countries, and Nigeria consists of 95,008 rows.

Now, let's get the subset of Nigeria.

```{r}
#| eval: false
wp <- subset(wp, `#clean_country_name` == "Nigeria")

#| eval: false
list(wp)

```

The subset now contains only data for Nigeria, and it has 95,008 rows and 70 columns.

As we are interested to study the non-functional water points, let's create a new column to indicate if the water points are functional or non-functional.

```{r}
#| eval: false
# Extract the first word from #status column
wp$status_n <- word(wp$`#status`, 1)

#| eval: false
unique(wp$status_n)

```

Now let's save the data set with the selected columns.

```{r}
#| eval: false
wp <- wp %>% select(c(`#lat_deg`,
                `#lon_deg`,
                `#clean_adm2`,
                status_n,
                `#water_source_category`,
                `#water_tech_category`,
                `#install_year`,
                `#management_clean`,
                `#subjective_quality`,
                water_point_population,
                local_population_1km,
                crucialness_score
))

```

```{r}
#| eval: false
write_csv(wp, "Data/Water_Point_Nigeria.csv")

```

We could now clear the R environment to release unused memory.

Let's import the data again for analysis.

```{r}
#| eval: false
wp <- read_csv("Data/Water_Point_Nigeria.csv")

```

The data now contains 95,008 rows and the selected 12 columns.

Let's take a look at some data in the *wp* data frame to check if the data is imported correctly.

```{r}
#| eval: false
list(wp)

```

We could notice that latitude and longitude columns contains decimal values. Hence, it's reasonable to assume they are in WGS 84 Geographic Coordinate System.

Now, let's convert the data frame into a simple feature data frame.

```{r}
#| eval: false
wp_sf <- st_as_sf(wp,
                  coords = c("#lon_deg", "#lat_deg"),
                  crs = 4326)

```

Let's take a look at the new simple feature data frame.

```{r}
#| eval: false
glimpse(wp_sf)

```

We have a new column, *geometry*, added into the simple feature data frame. The original latitude and longitude columns have been dropped.

**Geospatial Data**

Next, let's import the geospatial data into R as a polygon feature data.

```{r}
nga <- st_read(dsn = "Data/geoBoundaries-NGA-ADM2-all",
               layer = "geoBoundaries-NGA-ADM2")

```

We can see that this geospatial data is a multipolygon features object. It contains 774 multipolygon features and 5 fields. It is in WGS 84 coordinates system, and the bounding box provides the x and y extends of the data.

Now, let's check if there are any duplicated polygons in the geospatial data.

```{r}
n_occur <- data.frame(table(nga$shapeName))
n_occur[n_occur$Freq > 1,]
nga[nga$shapeName %in% n_occur$Var1[n_occur$Freq > 1], ]

```

Indeed, the table above shows that there are 6 pairs of duplicated polygons. However, they have different geometry values which means they are not the same regions.

Let's view those polygons with duplicated shapename in the map to validate our findings.

```{r}
nga_new <- left_join(nga, n_occur, by = c("shapeName" = "Var1"))

tm_shape(nga_new) +
  tm_polygons("Freq")

```

Indeed, those polygons are different although they have the same shapename. Let's use label the polygons with shapeID which contains unique IDs for easy identification.

```{r}
tm_shape(nga_new) +
  tm_polygons() +
  tm_shape(filter(nga_new, Freq == 2)) +
  tm_polygons("shapeID") +
  tm_legend(legend.outside=TRUE)

```

By referencing to cirad Aware webpage for **Nigeria administrative boundaries (level 2)** ([link](https://aware.cirad.fr/layers/geonode:nigeria_adminboundaries_adm2_20170222_32631)) which is an interactive webpage to view geospatial data, we are able to identify the correct names for the polygons.

| shapeID                    | Original shapeName | Correct shapeName   |
|----------------------------|--------------------|---------------------|
| NGA-ADM2-72505758B95534398 | Bassa              | Bassa (Kogi)        |
| NGA-ADM2-72505758B52690633 | Bassa              | Bassa (Plateau)     |
| NGA-ADM2-72505758B26581542 | Ifelodun           | Ifelodun (Kwara)    |
| NGA-ADM2-72505758B18326272 | Ifelodun           | Ifelodun (Osun)     |
| NGA-ADM2-72505758B75034141 | Irepodun           | Irepodun (Kwara)    |
| NGA-ADM2-72505758B79178637 | Irepodun           | Irepodun (Osun)     |
| NGA-ADM2-72505758B6786568  | Nasarawa           | Nasarawa (Kano)     |
| NGA-ADM2-72505758B67188591 | Nasarawa           | Nasarawa (Nasarawa) |
| NGA-ADM2-72505758B7318634  | Obi                | Obi (Benue)         |
| NGA-ADM2-72505758B3073896  | Obi                | Obi (Nasarawa)      |
| NGA-ADM2-72505758B6675111  | Surulere           | Surulere (Lagos)    |
| NGA-ADM2-72505758B31597260 | Surulere           | Surulere (Oyo)      |

Now, let's correct the shape names for the polygons with duplicated names.

```{r}
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B95534398"] <- "Bassa (Kogi)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B52690633"] <- "Bassa (Plateau)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B26581542"] <- "Ifelodun (Kwara)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B18326272"] <- "Ifelodun (Osun)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B75034141"] <- "Irepodun (Kwara)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B79178637"] <- "Irepodun (Osun)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B6786568"] <- "Nasarawa (Kano)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B67188591"] <- "Nasarawa (Nasarawa)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B7318634"] <- "Obi (Benue)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B3073896"] <- "Obi (Nasarawa)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B6675111"] <- "Surulere (Lagos)"
nga_new$shapeName[nga_new$shapeID == "NGA-ADM2-72505758B31597260"] <- "Surulere (Oyo)"

nga_new <- nga_new[, 1:5]

```

Let's check if the shape names are unique now.

```{r}
n_occur <- data.frame(table(nga_new$shapeName))
n_occur[n_occur$Freq > 1,]
nga_new[nga_new$shapeName %in% n_occur$Var1[n_occur$Freq > 1], ]

```

The report above shows that the shape names are unique now.

## Extracting Information about Non-Functional Water Points

Since we know the status of all the water points, we are able to calculate the total number of water points in each region as well as the non-functional water points. However, the absolute counts might lead us to the biased analysis result because the chance of having more non-functional water points are higher for regions having more water points. Therefore, we'll use the percentage of non-functional water points to understand the distribution.

### Extracting Non-Functional Water Points

Let's extract the data of non-functional water points.

```{r}
#| eval: false
wp_nonfunc <- wp_sf %>% filter(status_n == "Non-functional")

```

### Perform Point-in-Polygon Count

Let's add the count of the total water points and the non-functional water points into the geospatial data.

```{r}
#| eval: false
nga_wp <- nga_new %>% 
  mutate(total_wpt = lengths(
    st_intersects(nga_new, wp_sf)
  )) %>%
  mutate(wpt_nonfunc = lengths(
    st_intersects(nga_new, wp_nonfunc)
  ))

```

Let's also calculate the percentage of non-functional water points.

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(wpt_nonfunc_pct = wpt_nonfunc / total_wpt)

```

### Saving the Analytical Data Table

Now we have prepared the analytical data table. Let's save the simple feature data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "Data/nga_wp.rds")

```

We could now again clear the R environment and release the unused memory.

## Visualizing the Spatial Distribution of Water Points

Let's first import the analytical data back into R.

```{r}
nga_wp <- read_rds("Data/nga_wp.rds")

```

### Visualizing Non-Functional Water Points

Let's take a look at the distribution of the non-functional water points in Nigeria.

```{r}
non_functional_count <- tm_shape(nga_wp) +
                          tm_fill("wpt_nonfunc",
                                  style = "quantile",
                                  title = "Count") +
                          tm_layout(main.title = "Distribution of Non-Function Water Points in Nigeria (Count)",
                                    main.title.position = "center",
                                    main.title.size = 0.8,
                                    legend.height = 0.3,
                                    legend.width = 0.2,
                                    legend.title.size = 0.8,
                                    legend.text.size = 0.4,
                                    frame = TRUE) +
                          tm_borders(alpha = 0.5) +
                          tm_scale_bar() +
                          tm_grid(alpha = 0.2)

non_functional_pct <- tm_shape(nga_wp) +
                          tm_fill("wpt_nonfunc_pct",
                                  style = "quantile",
                                  title = "Percentage") +
                          tm_layout(main.title = "Distribution of Non-Function Water Points in Nigeria (%)",
                                    main.title.position = "center",
                                    main.title.size = 0.8,
                                    legend.height = 0.3,
                                    legend.width = 0.2,
                                    legend.title.size = 0.8,
                                    legend.text.size = 0.4,
                                    frame = TRUE) +
                          tm_borders(alpha = 0.5) +
                          tm_scale_bar() +
                          tm_grid(alpha = 0.2)

tmap_arrange(non_functional_count, non_functional_pct, asp=1, ncol=2)
```

The plot on the left shows that eastern, central and western Nigeria have higher number of non-functional water points. However, people from southern and north-western parts of Nigeria might be facing a more severe water crisis because the proportion of non-functional water points in those area is high.

The plots also tells us that the percentage of non-functional water points is a better indicator to understand the distribution of the non-functional water points.

## Global Spatial Autocorrelation

In this section, we'll test if the non-functional water points are evenly distributed across Nigeria by:

-   **Calculating global spatial autocorrelation statistics**

-   **Conducting spatial complete randomness test**

### Computing contiguity spatial weights

We first need to cconstruct the spatial weights matrix to define the neighbourhood relationship among the regions. In this exercise, we will use Queen criteria to define the neighbours.

```{r}
wm_q <- poly2nb(nga_wp, queen = TRUE)
summary(wm_q)

```

The summary report tells us that there are 774 regions in Nigeria, and there is one region without any neighbours. Among the rest of the regions, there are two least connected regions with 1 neighbour each, and 1 most connected region with 14 neighbours.

### Row-standardized weights matrix

Next, we need to assign the weights to each neighbouring region. In this exercise, we assign equal weights to each neighbouring region.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
print(rswm_q, zero.policy = TRUE)

```

### Global Spatial Autocorrelation: Moran's I

Now, we are ready to conduct Moran's I statistics test.

**Null hypothesis:** the non-functional water points are randomly disbursed

**Alternative hypothesis:** the non-functional water points are spatially clustered

### Moran's I test

```{r}
moran.test(nga_wp$wpt_nonfunc_pct, 
           listw = rswm_q, 
           zero.policy = TRUE, 
           na.action = na.omit)

```

The p-value is less than 0.5, and we have enough evidence to reject the null hypothesis at 5% significance level. We are able to conclude that the non-functional water points are spatially clustered.

**Computing Monte Carlo Moran's I**

To test is the Moran's I statistic is significant, we'll perform a permutation test with 1000 simulations.

```{r}
set.seed(1234)
bperm = moran.mc(nga_wp$wpt_nonfunc_pct, 
                 listw = rswm_q, 
                 nsim = 999, 
                 zero.policy = TRUE, 
                 na.action = na.omit)
bperm

```

The p-value is less than 0.05, and we have enough evidence to reject the null hypothesis at 5% significance level. We could conclude that Moran's I statistic is significant, and the non-functional water points are indeed spatially clustered.

**Visualizing Monte Carlo Moran's I**

We could also plot the simulated Moran's I statistics to analyze its significance.

```{r}
summary(bperm$res[1:999])

```

The summary report shows that the simulated Moran's I statistic has a mean of -0.001140. The smallest Moran's I statistic is -0.079821. and the largest is 0.084960.

```{r}
var(bperm$res[1:999])

```

Furthermore, the simulated Moran's I statistic has a variance of 0.000499.

```{r}
hist(bperm$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab= "Simulated Moran's I")
abline(v = 0, 
       col = "red") 

```

The histogram above shows the distribution of Moran's I values we could expect if the non-functional water points are randomly distributed across Nigeria. According to the Moran's I test we performed earlier, the Moran's I statistic is 0.463 which is far away to the right to the histogram. Hence, we could conclude that the Moran's I statistic of 0.463 is significant, and the non-functional water points are spatially clustered.

## Spatial Correlagram

Next, let's check if the non-functional water points rates are correlated at different lags (i.e. distance) based on Moran's I test.

### Computing Moran's I correlogram

Let's compute a 6-lag spatial correlogram of non-functional water points. As NA is not allowed in sp.correlogram function, we'll replace all the NA in wpt_nonfunc_pct variable to 0.

```{r}
nga_wp <- nga_wp %>% mutate_at(vars(wpt_nonfunc_pct), ~replace_na(., 0))

```

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          nga_wp$wpt_nonfunc_pct, 
                          order = 6, 
                          method = "I", 
                          style = "W",
                          zero.policy = TRUE)
plot(MI_corr)

```

Let's also check the p values at each lag.

```{r}
print(MI_corr)

```

The report shows that the p-values at all legs are less than 0.05, and we have enough evidence to conclude that the non-functional water points rates are significantly correlated among nearby neighbours at 5% significance level. This validates our conclusion from the previous section that the non-functional water points are spatially clustered.

## Cluster and Outlier Analysis

We know by now that there are spatial clusters in terms of non-functional water point rates in Nigeria. Next, we need to to identify the clusters and find out if there are any outliers in terms of non-functional water point rates.

### Computing local Moran's I

Let's compute the local Moran's I statistic.

```{r}
fips <- order(nga_wp$shapeName)
localMI <- localmoran(nga_wp$wpt_nonfunc_pct, 
                      rswm_q,
                      zero.policy = TRUE, 
                      na.action=na.omit)
head(localMI)

```

Next, let's list the local Moran'I statistic by each region.

```{r}
printCoefmat(data.frame(
  localMI[fips, ], 
  row.names = nga_wp$shapeName[fips]),
  check.names = FALSE)

```

### **Mapping the local Moran's I**

Let's first append the local Moran's I data frame onto nga_wp SpatialPolygonDataFrame.

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)

```

We then plot the local Moran's I values on the township boundaries.

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran Statistics") +
  tm_borders(alpha = 0.5) +
  tm_legend(legend.outside = TRUE)

```

### Mapping local Moran's I p-values

Although the map above shows that there are both positive and negative Ii values, let's plot the p-values to check if they are statistically significant.

```{r}
tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette = "-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_legend(legend.outside = TRUE)

```

Let's plot them side by side for easy comparison.

```{r}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran Statistics") +
  tm_borders(alpha = 0.5) +
  tm_legend(legend.outside = TRUE)

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette = "-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_legend(legend.outside = TRUE)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)

```

The plots above show that most of the clusters with positive Ii values are statistically significant at 5% significance level.

## Creating LISA Cluster Map

Next, we'll use LISA cluster map to identify the types of the spatial autocorrelation of the clusters.

### Plotting Moran Scatterplot

Let's first plot the Moran scatterplot to compare the non-functional water point rates in the regions against their neighbours.

```{r}
nci <- moran.plot(nga_wp$wpt_nonfunc_pct, rswm_q,
                  labels = as.character(nga_wp$shapeName), 
                  xlab = "Proportion of Non-functional Water Points", 
                  ylab = "Spatially Lag",
                  zero.policy = TRUE)

```

There are four quadrants in the plot. Top right and bottom left quadrants indicate the existence of clusters, and the other two quadrants indicate the outliers. The graph below demonstrates the definition of the clusters and outliers.

![](Moran%20Scatterplot.png)

### Plotting Moran scatterplot with standardized variables

Next, we'll standardize the non-functional water point rates and plot the Moran scatterplot again.

```{r}
nga_wp$Z.wpt_nonfunc_pct <- scale(nga_wp$wpt_nonfunc_pct) %>% 
  as.vector 

```

```{r}
nci2 <- moran.plot(nga_wp$Z.wpt_nonfunc_pct, rswm_q,
                  labels = as.character(nga_wp$shapeName), 
                  xlab = "z-Proportion of Non-functional Water Points", 
                  ylab = "z-Spatially Lag",
                  zero.policy = TRUE)

```

### Preparing LISA map classes

Next, let's prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric", length = nrow(localMI))

```

Next, we'll derive the spatially lagged non-functional water points rate, and center the spatially lagged variable around its mean.

```{r}
nga_wp$lag_wpt_nonfunc_pct <- lag.listw(rswm_q, nga_wp$wpt_nonfunc_pct, zero.policy = TRUE, na.action = na.omit)

DV <- nga_wp$lag_wpt_nonfunc_pct - mean(nga_wp$lag_wpt_nonfunc_pct)     

```

We also center the local Moran's I around its mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    

```

And we will use 5% as the significance level.

```{r}
signif <- 0.05

```

Next, we'll define the four quadrants as shown in the Moran scatterplot.

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4

```

And place the non-significant Moran in category 0.

```{r}
quadrant[localMI[,5] > signif] <- 0

```

### Plotting LISA map

```{r}
nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_legend(legend.outside=TRUE)

```

Let's plot all the maps together for easy comparison.

```{r}
wpt_nonfunc_pct <- qtm(nga_wp, "wpt_nonfunc_pct")

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap  <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(wpt_nonfunc_pct, LISAmap,
             asp=0, ncol=2)

```

```{r}
localMI.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran Statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette = "-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map,
             asp=0, ncol=2)

```

We could observe from the plots above that:

-   There is a big cluster of townships with low non-functional water point rates at the north-eastern part of Nigeria

-   There are also a few small clusters with high non-functional water point rates at the southern part of the country.

-   There are a few ourliers in the northern Nigeria where the townships having high non-functional water point rates but their neighbours have low non-functional water point rates.

-   On the other hand, there are a few townships in the central and north-western part of the country having low non-functional water point rates but their neighbours have high non-functional water point rates.

## Hot Spot and Cold Spot Area Analysis

Next, let's check if there is any township having significantly high or low non-functional water point rates.

### Getis and Ord's G-Statistics

We'll use Getis and Ord's G-statistics to check if there are any

-   hot-spots within the clusters having high non-functional water point rates

-   cold-spots within the clusters having low non-functional water point rates

**Deriving distance-based weight matrix**

First, we'll re-define the neighbours based on distance. There are two types of distance-based proximity matrix:

-   fixed distance weight matrix

-   adaptive distance weight matrix

Regardless of the type of the distance-based proximity matrix, we need to derive the centroid of the townships first.

In order to derive the centroid, we need to obtain the coordinates of the townships.

```{r}
longitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])

latitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])

coords <- cbind(longitude, latitude)

```

**Determine the cut-off distance**

Let's determine the upper limit for distance band by checking the distance distribution.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)

```

We use the largest first nearest neighbour distance, 71.661, as the upper threshold to ensure all the townships will have at least one neighbour.

**Computing fixed distance weight matrix**

Next, we compute the distance matrix.

```{r}
wm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)
wm_d72

```

Next, we convert the nb object into spatial weights object.

```{r}
wm72_lw <- nb2listw(wm_d72, style = 'B')
summary(wm72_lw)

```

## Computing Adaptive Distance Weight Matrix

However, fixed distance might lead us to biased results because more densely settled areas (e.g., urban area) would have more neighbours, and less densely settled areas (e.g., rural area) would have less neighbours. Having many neighbours smoothes the neighbout relationship across more neighbours.

To avoid this, we could control the number of neighbours directly either accepting asymmetric neighbours or imposing symmetric. In this exercise, let's try to limit the number of neighbours to 8 first.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn

```

Then convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)

```

## Computing Gi Statistics

### Gi statistics using fixed distance

Let's first calculate the Gi statistics using the fixed distance weight matrix we derived earlier.

```{r}
fips <- order(nga_wp$shapeName)
gi.fixed <- localG(nga_wp$wpt_nonfunc_pct, wm72_lw)
gi.fixed

```

Next, we join the Gi values to nga_wp data frame.

```{r}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)

```

### Mapping Gi values with fixed distance weights

Let's plot the Gi values derived using fixed distance weight matrix on the township boundaries.

```{r}
wpt_nonfunc_pct <- qtm(nga_wp, "wpt_nonfunc_pct")

Gimap <-tm_shape(nga_wp.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "Local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(wpt_nonfunc_pct, Gimap,
             asp=0, ncol=2)

```

From the plots above, we observe that there are a few townships in the north-eastern and nothern parts of the country having significantly lower non-functional water point rates than their neighbours (i.e., cold-spots). On the other hand, there are a few townships in the southern part having significantly higher non-functional water point rates than their neighbours (i.e., hot-spots).

### Gi statistics using adaptive distance

Next, let's try to derive the Gi statistics using adaptive distance weight matrix computed earlier.

```{r}
fips <- order(nga_wp$shapeName)
gi.adaptive <- localG(nga_wp$wpt_nonfunc_pct, knn_lw)
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)

```

### Mapping Gi values with adaptive distance weights

Let's plot the Gi values derived using fixed distance weight matrix on the township boundaries.

```{r}
wpt_nonfunc_pct <- qtm(nga_wp, "wpt_nonfunc_pct")

Gimap <- tm_shape(nga_wp.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "Local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(wpt_nonfunc_pct, Gimap, 
             asp=0, ncol=2)

```

From the plots above we could see that the hot-spots and cold-spots have been changed comparing to the plots using fixed distance weight matrix. The cold spots are centered at the northeast corner of the county, and the hot spots are centered at the southern part now.

## Conclusion

After performing the relevant global and local analysis and tests on the non-functional water points in Nigeria, we successfully discovered the following insights:

-   There are indeed area / clusters containing townships having low non-functional water point rates, and there are also area / clusters containing townships having high non-functional water point rates

-   There are area having low non-functional water point rates but surrounded by neighbours having high non-functional water point rates. There are also area having high non-functional water point rates but surrounded by neighbours having low non-functional water point rates. Further investigation into those area might help the government to gain in-depth understanding about them, and could help them to improve the water supply system.

-   There are townships having significantly lower non-functional water point rates among the low rate clusters, and there are townships having significantly higher rates among the high rate clusters.

Thank you!

## References

-   UNICEF. (2022, March 22). *Nearly one third of Nigerian children do not have enough water to meet their daily needs - UNICEF.* <https://www.unicef.org/nigeria/press-releases/nearly-one-third-nigerian-children-do-not-have-enough-water-meet-their-daily-needs>

#### 
