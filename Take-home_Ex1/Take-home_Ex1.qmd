---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good"
editor: visual
---

## Background

In Singapore, people are used to access clean water any where and any time. The convenience of getting clean water makes some people forget how precious clean water is, can how difficult it is for people living in other countries to use clean water.

Nigeria is one of the countries still facing severe water crisis, and about one third of the children there don't have enough water to meet their daily needs.

In this take-home exercise, we are going to analyze the water point related data in Nigeria to reveal the spatial patterns of Not Functional water points.

## Problem Statement

-   Apply global measures of spatial association techniques to study if the Not Functional water points are evenly distributed across Nigeria
-   Apply local measures of spatial association techniques to study if there are any area having more Not Functional water points

## Getting Started

### Data sources

-   **Aspatial Data**

A set of a spatial data containing the water point related information is downloaded from [Water Point Data Exchange (WPdx)](https://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data) website.

The original data set contains the data from 17 countries, and only the subset of Nigeria is used for the analysis in this exercise.

-   **Geospatial Data**

Nigeria Level-2 Administrative Boundary polygon features GIS data downloaded from [geoBoundaries](https://www.geoboundaries.org/) will be used in this exercise.

### Loading R Packages

First of all, let's load the required R packages into R:

-   **sf**: importing, managing and processing geospatial data.

-   **spdep**: computing spatial weights and spatially lagged variables.

-   **tmap**: plotting Thematic Maps

-   **tidyverse**: importing, wrangling and visualizing data. It consists of a family of R packages, including **readr**, **readxl**, **tidyr**, **dplyr** and **ggplot2**.

-   **stringr**: transforming text data

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, stringr)

```

### Importing Data

**Aspatial Data**

Let's import the aspatial data containing the water point information.

```{r}
#| eval: false
wp <- read_csv("Data/Water_Point_Data_Exchange-Plus_WPdx.csv")

```

The data set contains 406,566 rows and 70 columns.

```{r}
#| eval: false
table(wp$`#clean_country_name`)

#| eval: false
length(table(wp$`#clean_country_name`))

```

The aspatial data set contains data from 17 countries, and Nigeria consists of 95,008 rows.

Now, let's get the subset of Nigeria.

```{r}
#| eval: false
wp <- subset(wp, `#clean_country_name` == "Nigeria")

#| eval: false
list(wp)

```

The subset now contains only data for Nigeria, and it has 95,008 rows and 70 columns.

As we are interested to study the non-functional water points, let's create a new column to indicate if the water points are functional or non-functional.

```{r}
#| eval: false
# Extract the first word from #status column
wp$status_n <- word(wp$`#status`, 1)

#| eval: false
unique(wp$status_n)

```

Now let's save the data set with the selected columns.

```{r}
#| eval: false
wp <- wp %>% select(c(`#lat_deg`,
                `#lon_deg`,
                `#clean_adm2`,
                status_n,
                `#water_source_category`,
                `#water_tech_category`,
                `#install_year`,
                `#management_clean`,
                `#subjective_quality`,
                water_point_population,
                local_population_1km,
                crucialness_score
))

```

```{r}
#| eval: false
write_csv(wp, "Data/Water_Point_Nigeria.csv")

```

We could now clear the R environment to release unused memory.

Let's import the data again for analysis.

```{r}
#| eval: false
wp <- read_csv("Data/Water_Point_Nigeria.csv")

```

The data now contains 95,008 rows and the selected 12 columns.

Let's take a look at some data in the *wp* data frame to check if the data is imported correctly.

```{r}
#| eval: false
list(wp)

```

We could notice that latitude and longitude columns contains decimal values. Hence, it's reasonable to assume they are in WGS 84 Geographic Coordinate System.

Now, let's convert the data frame into a simple feature data frame.

```{r}
#| eval: false
wp_sf <- st_as_sf(wp,
                  coords = c("#lon_deg", "#lat_deg"),
                  crs = 4326)

```

Let's take a look at the new simple feature data frame.

```{r}
#| eval: false
glimpse(wp_sf)

```

We have a new column, *geometry*, added into the simple feature data frame. The original latitude and longitude columns have been dropped.

**Geospatial Data**

Next, let's import the geospatial data into R as a polygon feature data.

```{r}
#| eval: false
nga <- st_read(dsn = "Data/geoBoundaries-NGA-ADM2-all",
               layer = "geoBoundaries-NGA-ADM2")

```

We can see that this geospatial data is a multipolygon features object. It contains 774 multipolygon features and 5 fields. It is in WGS 84 coordinates system, and the bounding box provides the x and y extends of the data.

## Extracting Information about Non-Functional Water Points

Since we know the status of all the water points, we are able to calculate the total number of water points in each region as well as the non-functional water points. However, the absolute counts might lead us to the biased analysis result because the chance of having more non-functional water points are higher for regions having more water points. Therefore, we'll use the percentage of non-functional water points to understand the distribution.

### Extracting Non-Functional Water Points

Let's extract the data of non-functional water points.

```{r}
#| eval: false
wp_nonfunc <- wp_sf %>% filter(status_n == "Non-functional")

```

### Perform Point-in-Polygon Count

Let's add the count of the total water points and the non-functional water points into the geospatial data.

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(total_wpt = lengths(
    st_intersects(nga, wp_sf)
  )) %>%
  mutate(wpt_nonfunc = lengths(
    st_intersects(nga, wp_nonfunc)
  ))

```

Let's also calculate the percentage of non-functional water points.

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(wpt_nonfunc_pct = wpt_nonfunc / total_wpt)

```

### Saving the Analytical Data Table

Now we have prepared the analytical data table. Let's save the simple feature data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "Data/nga_wp.rds")

```

We could now again clear the R environment and release the unused memory.

## Visualizing the Spatial Distribution of Water Points

Let's first import the analytical data back into R.

```{r}
nga_wp <- read_rds("Data/nga_wp.rds")

```

### Visualizing Non-Functional Water Points

Let's take a look at the distribution of the non-functional water points in Nigeria.

```{r}
non_functional_count <- tm_shape(nga_wp) +
                          tm_fill("wpt_nonfunc",
                                  style = "quantile",
                                  title = "Count") +
                          tm_layout(main.title = "Distribution of Non-Function Water Points in Nigeria (Count)",
                                    main.title.position = "center",
                                    main.title.size = 0.8,
                                    legend.height = 0.3,
                                    legend.width = 0.2,
                                    legend.title.size = 0.8,
                                    legend.text.size = 0.4,
                                    frame = TRUE) +
                          tm_borders(alpha = 0.5) +
                          tm_scale_bar() +
                          tm_grid(alpha = 0.2)

non_functional_pct <- tm_shape(nga_wp) +
                          tm_fill("wpt_nonfunc_pct",
                                  style = "quantile",
                                  title = "Percentage") +
                          tm_layout(main.title = "Distribution of Non-Function Water Points in Nigeria (%)",
                                    main.title.position = "center",
                                    main.title.size = 0.8,
                                    legend.height = 0.3,
                                    legend.width = 0.2,
                                    legend.title.size = 0.8,
                                    legend.text.size = 0.4,
                                    frame = TRUE) +
                          tm_borders(alpha = 0.5) +
                          tm_scale_bar() +
                          tm_grid(alpha = 0.2)

tmap_arrange(non_functional_count, non_functional_pct, asp=1, ncol=2)
```

The plot on the left shows that eastern, central and western Nigeria have higher number of non-functional water points. However, people from southern and north-western parts of Nigeria might be facing a more severe water crisis because the proportion of non-functional water points in those area is high.

The plots also tells us that the percentage of non-functional water points is a better indicator to understand the distribution of the non-functional water points.

## Global Spatial Autocorrelation

In this section, we'll test if the non-functional water points are evenly distributed across Nigeria by:

-   **Calculating global spatial autocorrelation statistics**

-   **Conducting spatial complete randomness test**

### Computing contiguity spatial weights

We first need to cconstruct the spatial weights matrix to define the neighbourhood relationship among the regions. In this exercise, we will use Queen criteria to define the neighbours.

```{r}
wm_q <- poly2nb(nga_wp, queen = TRUE)
summary(wm_q)

```

The summary report tells us that there are 774 regions in Nigeria, and there is one region without any neighbours. Among the rest of the regions, there are two least connected regions with 1 neighbour each, and 1 most connected region with 14 neighbours.

### Row-standardized weights matrix

Next, we need to assign the weights to each neighbouring region. In this exercise, we assign equal weights to each neighbouring region.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
print(rswm_q, zero.policy = TRUE)

```

### Global Spatial Autocorrelation: Moran's I

Now, we are ready to conduct Moran's I statistics test.

**Null hypothesis:** the non-functional water points are randomly disbursed

**Alternative hypothesis:** the non-functional water points are spatially clustered

### Moran's I test

```{r}
moran.test(nga_wp$wpt_nonfunc_pct, 
           listw = rswm_q, 
           zero.policy = TRUE, 
           na.action = na.omit)

```

The p-value is less than 0.5, and we have enough evidence to reject the null hypothesis at 5% significance level. We are able to conclude that the non-functional water points are spatially clustered.

**Computing Monte Carlo Moran's I**

To test is the Moran's I statistic is significant, we'll perform a permutation test with 1000 simulations.

```{r}
set.seed(1234)
bperm = moran.mc(nga_wp$wpt_nonfunc_pct, 
                 listw = rswm_q, 
                 nsim = 999, 
                 zero.policy = TRUE, 
                 na.action = na.omit)
bperm

```

The p-value is less than 0.05, and we have enough evidence to reject the null hypothesis at 5% significance level. We could conclude that Moran's I statistic is significant, and the non-functional water points are indeed spatially clustered.

**Visualizing Monte Carlo Moran's I**

We could also plot the simulated Moran's I statistics to analyze its significance.

```{r}
summary(bperm$res[1:999])

```

The summary report shows that the simulated Moran's I statistic has a mean of -0.001140. The smallest Moran's I statistic is -0.079821. and the largest is 0.084960.

```{r}
var(bperm$res[1:999])

```

Furthermore, the simulated Moran's I statistic has a variance of 0.000499.

```{r}
hist(bperm$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab= "Simulated Moran's I")
abline(v = 0, 
       col = "red") 

```

The histogram above shows the distribution of Moran's I values we could expect if the non-functional water points are randomly distributed across Nigeria. According to the Moran's I test we performed earlier, the Moran's I statistic is 0.463 which is far away to the right to the histogram. Hence, we could conclude that the Moran's I statistic of 0.463 is significant, and the non-functional water points are spatially clustered.

## Spatial Correlagram

Next, let's check if the non-functional water points rates are correlated at different lags (i.e. distance) based on Moran's I test.

### Computing Moran's I correlogram

Let's compute a 6-lag spatial correlogram of non-functional water points. As NA is not allowed in sp.correlogram function, we'll replace all the NA in wpt_nonfunc_pct variable to 0.

```{r}
nga_wp <- nga_wp %>% mutate_at(vars(wpt_nonfunc_pct), ~replace_na(., 0))

```

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          nga_wp$wpt_nonfunc_pct, 
                          order = 6, 
                          method = "I", 
                          style = "W",
                          zero.policy = TRUE)
plot(MI_corr)

```

Let's also check the p values at each lag.

```{r}
print(MI_corr)

```

The report shows that the p-values at all legs are less than 0.05, and we have enough evidence to conclude that the non-functional water points rates are significantly correlated among nearby neighbours at 5% significance level. This validates our conclusion from the previous section that the non-functional water points are spatially clustered.

Thank you!

## References

-   UNICEF. (2022, March 22). *Nearly one third of Nigerian children do not have enough water to meet their daily needs - UNICEF.* <https://www.unicef.org/nigeria/press-releases/nearly-one-third-nigerian-children-do-not-have-enough-water-meet-their-daily-needs>

#### 
