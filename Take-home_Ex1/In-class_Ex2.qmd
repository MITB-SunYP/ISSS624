---
title: "In-class Exercise 2: Geospatial Analytics for Social Good"
editor: visual
---

## Overview

In this in-class exercise, I learned how to compute global and local measures of spatial association in R.

## Getting Started

Firstly, we need to install the required R packages.

-   **sf**: importing, managing and processing geospatial data.

-   **spdep**: computing spatial weights and spatially lagged variables.

-   **tmap**: plotting Thematic Maps

-   **tidyverse**: importing, wrangling and visualizing data. It consists of a family of R packages, including **readr**, **readxl**, **tidyr**, **dplyr** and **ggplot2**.

-   **funModeling**: a tool box for data preparation and exploratory data analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)

```

## Importing Required Data

### Importing water point geospatial data

We'll first import the water point geospatial data.

```{r}
#| eval: false
wp <- st_read(dsn = "Data/geo_export",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")

```

Next we save the sf data frame into an output file in rds data format.

```{r}
#| eval: false
write_rds(wp, "Data/wp_nga.rds")

```

### Importing Nigeria LGA boundary data

Now we'll import the LGA boundary data into R.

```{r}
#| eval: false
nga <- st_read(dsn = "Data/geoBoundaries-NGA-ADM2-all",
               layer = "geoBoundaries-NGA-ADM2")

```

## Data Wrangling

### Recoding NA values into string

Since there are NA values in status_cle field in wp simple feature object, we'll recode them into "Unknown".

```{r}
#| eval: false
wp_nga <- read_rds("Data/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))

```

### Exploratory Data Analysis (EDA)

Let's check the distribution of status_cle field now.

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')

```

The plot above shows that most of the water points are functional, which constitute to 48% of all the water points in Nigeria. Non-functional water points constitute to 31% of all the water points.

## Extracting Water Point Data

### Extracting functional water point

We'll first extract the data for functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))

```

Let's check the distribution.

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')

```

### Extracting non-functional water point

Next we'll first extract the data for non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))

```

Let's check the distribution.

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')

```

### Extracting water point with unknown class

Next we'll first extract the data for water points with unknown status.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")

```

## Performing Point-in-Polygon Count

Next we'll count the number of water points with different status, and join the counts with the geoboundary data.

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))

```

## Saving the Analytical Data Table

We'll save the nga_wp table in rds format for future use.

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) 

```

```{r}
#| eval: false
write_rds(nga_wp, "Data/nga_wp_inclass.rds")

```

In order to save the storage space, we'll now remove the other data in the folder and only keep the nga_wp_inclass data table.

Let's import the data table again before proceeding.

```{r}
nga_wp <- read_rds("Data/nga_wp_inclass.rds")

```

## Visualizing the Spatial Distribution of Water Points

```{r fig.width=10, fig.height=10}
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)

```
